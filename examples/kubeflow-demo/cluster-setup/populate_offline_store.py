import numpy as np
import pandas as pd
import sqlalchemy

from datetime import datetime, timedelta

def create_driver_daily_stats_df(drivers, start_date, end_date) -> pd.DataFrame:
    """    
    profit: Daily profit of a driver
    acc_rate: Accepted ride requests / total ride offers to driver (driver acceptance rate)
    
    Example df generated by this function:
    | event_timestamp  | driver_id | profit  | acc_rate |
    |------------------+-----------+---------+----------|
    | 2021-03-17 19:31 | 1001      | 88.9188 | 0.049057 |
    | 2021-03-18 19:31 | 1001      | 97.9273 | 0.212630 |
    | 2021-03-19 19:31 | 1001      | 97.6549 | 0.176881 |
    | 2021-03-20 19:31 | 1001      | 27.3697 | 0.325012 |
    | 2021-03-21 19:31 | 1001      | 43.8262 | 0.313009 |
    |                  |    ...    |   ...   |    ...   |
    | 2021-03-19 19:31 | 1020      | 73.8860 | 0.857422 |
    | 2021-03-20 19:31 | 1020      | 84.8397 | 0.745989 |
    | 2021-03-21 19:31 | 1020      | 30.1552 | 0.185873 |
    | 2021-03-22 19:31 | 1020      | 94.3030 | 0.561219 |
    | 2021-03-23 19:31 | 1020      | 35.4919 | 0.810093 |
    """
    df_daily = pd.DataFrame(
        {
            "event_timestamp": [
                pd.Timestamp(dt, unit="ms", tz="UTC").round("ms")
                for dt in pd.date_range(
                    start=start_date, end=end_date, freq="1D", inclusive="left"
                )
            ]
        }
    )
    df_all_drivers = pd.DataFrame()

    for driver in drivers:
        df_daily_copy = df_daily.copy()
        df_daily_copy["driver_id"] = driver
        df_all_drivers = pd.concat([df_daily_copy, df_all_drivers])

    df_all_drivers.reset_index(drop=True, inplace=True)

    rows = df_all_drivers["event_timestamp"].count()

    df_all_drivers["profit"] = np.random.random(size=rows).astype(np.float32) * 100
    df_all_drivers["acc_rate"] = np.random.random(size=rows).astype(np.float32)

    return df_all_drivers

def create_driver_locations(drivers, start_date, end_date) -> pd.DataFrame:
    """
    Example df generated by this function:
    | event_timestamp  | driver_id | lat       | lon       |
    |------------------+-----------+-----------+-----------|
    | 2021-03-17 19:31 | 1001      | 37.979161 | 23.783086 |
    | 2021-03-18 19:41 | 1001      | 37.979163 | 23.783089 |
    |                  |  ...      |    ...    |    ...    |
    | 2021-03-23 19:51 | 1001      | 35.491932 | 23.783099 |
    """
    df_daily = pd.DataFrame(
        {
            "event_timestamp": [
                pd.Timestamp(dt, unit="ms", tz="UTC").round("ms")
                for dt in pd.date_range(
                    start=start_date, end=end_date, freq="10min", inclusive="left"
                )
            ]
        }
    )
    df_all_drivers = pd.DataFrame()

    for driver in drivers:
        df_daily_copy = df_daily.copy()
        df_daily_copy["driver_id"] = driver
        df_all_drivers = pd.concat([df_daily_copy, df_all_drivers])

    df_all_drivers.reset_index(drop=True, inplace=True)

    rows = df_all_drivers["event_timestamp"].count()

    df_all_drivers["lat"] = np.random.uniform(low=37.97800, high=37.98000, size=rows).astype(np.float32)
    df_all_drivers["lon"] = np.random.uniform(low=23.78300, high=23.78900, size=rows).astype(np.float32)

    return df_all_drivers

def get_sqlalchemy_engine(config):
    url = f"postgresql+psycopg2://{config['user']}:{config['password']}@{config['host']}:{config['port']}/{config['database']}"
    print("Connecting to", config["db_schema"], "schema using:", url)
    return sqlalchemy.create_engine(url, client_encoding='utf8', connect_args={'options': '-c search_path={}'.format(config["db_schema"])})

if __name__ == "__main__":
    alice_config = {
        "user": "alice",
        "password": "alice",
        "host": "postgresql-offline-store.default.svc.cluster.local",
        "port": 5432,
        "database": "driver_data",
        "db_schema": "driver_data"
    }

    charlie_config = {
        "user": "charlie",
        "password": "charlie",
        "host": "postgresql-offline-store.default.svc.cluster.local",
        "port": 5432,
        "database": "driver_stream_data",
        "db_schema": "driver_stream_data"
    }

    drivers=list(range(1001, 1021))

    print("Creating historical driver daily stats for the previous 90 days!")
    end_date = datetime.utcnow().replace(microsecond=0, second=0, minute=0)
    start_date = end_date - timedelta(days=90)

    driver_daily_stats_df = create_driver_daily_stats_df(drivers, start_date, end_date)

    con_alice = get_sqlalchemy_engine(alice_config)

    print("Storing historical driver daily stats data to the offline store!")
    driver_daily_stats_df.to_sql(
        name="driver_daily_stats",
        con=con_alice,
        schema=alice_config["db_schema"],
        if_exists="replace",
        dtype={
            "event_timestamp": sqlalchemy.TIMESTAMP,
            "driver_id": sqlalchemy.INT,
            "profit": sqlalchemy.FLOAT,
            "acc_rate": sqlalchemy.FLOAT
        }
    )

    print("Creating historical driver locations for the previous 30 days!")
    end_date = datetime.utcnow().replace(microsecond=0, second=0) + timedelta(days=1)
    start_date = end_date - timedelta(days=30)

    driver_locations_df = create_driver_locations(drivers, start_date, end_date)

    con_charlie = get_sqlalchemy_engine(charlie_config)

    print("Storing historical driver locations data to the offline store!")
    driver_locations_df.to_sql(
        name="driver_locations",
        con=con_charlie,
        schema=charlie_config["db_schema"],
        if_exists="replace",
        dtype={
            "event_timestamp": sqlalchemy.TIMESTAMP,
            "driver_id": sqlalchemy.INT,
            "lat": sqlalchemy.FLOAT,
            "lon": sqlalchemy.FLOAT
        }
    )