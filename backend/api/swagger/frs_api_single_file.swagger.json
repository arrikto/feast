{
  "swagger": "2.0",
  "info": {
    "title": "Feast Registry API",
    "version": "0.0.1",
    "description": "This file contains REST API specification for Feast Registry. The file is autogenerated from the swagger definition."
  },
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/CreateDataSource": {
      "post": {
        "operationId": "DataSourceService_CreateDataSource",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiDataSource"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/gatewayruntimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiDataSource"
            }
          }
        ],
        "tags": [
          "DataSourceService"
        ]
      }
    },
    "/DeleteDataSource": {
      "delete": {
        "operationId": "DataSourceService_DeleteDataSource",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/gatewayruntimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "project",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "DataSourceService"
        ]
      }
    },
    "/GetDataSource": {
      "get": {
        "operationId": "DataSourceService_GetDataSource",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiDataSource"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/gatewayruntimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "project",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "DataSourceService"
        ]
      }
    },
    "/ListDataSources": {
      "get": {
        "operationId": "DataSourceService_ListDataSources",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiListDataSourcesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/gatewayruntimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "project",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "DataSourceService"
        ]
      }
    },
    "/UpdateDataSource": {
      "post": {
        "operationId": "DataSourceService_UpdateDataSource",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiDataSource"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/gatewayruntimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiDataSource"
            }
          }
        ],
        "tags": [
          "DataSourceService"
        ]
      }
    },
    "/CreateEntity": {
      "post": {
        "operationId": "EntityService_CreateEntity",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiEntity"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/gatewayruntimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiEntity"
            }
          }
        ],
        "tags": [
          "EntityService"
        ]
      }
    },
    "/DeleteEntity": {
      "delete": {
        "operationId": "EntityService_DeleteEntity",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/gatewayruntimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "project",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "EntityService"
        ]
      }
    },
    "/GetEntity": {
      "get": {
        "operationId": "EntityService_GetEntity",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiEntity"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/gatewayruntimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "project",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "EntityService"
        ]
      }
    },
    "/ListEntities": {
      "get": {
        "operationId": "EntityService_ListEntities",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiListEntitiesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/gatewayruntimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "project",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "EntityService"
        ]
      }
    },
    "/UpdateEntity": {
      "post": {
        "operationId": "EntityService_UpdateEntity",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiEntity"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/gatewayruntimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiEntity"
            }
          }
        ],
        "tags": [
          "EntityService"
        ]
      }
    },
    "/CreateFeatureService": {
      "post": {
        "operationId": "FeatureServiceService_CreateFeatureService",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiFeatureService"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/gatewayruntimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiFeatureService"
            }
          }
        ],
        "tags": [
          "FeatureServiceService"
        ]
      }
    },
    "/DeleteFeatureService": {
      "delete": {
        "operationId": "FeatureServiceService_DeleteFeatureService",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/gatewayruntimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "project",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "FeatureServiceService"
        ]
      }
    },
    "/GetFeatureService": {
      "get": {
        "operationId": "FeatureServiceService_GetFeatureService",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiFeatureService"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/gatewayruntimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "project",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "FeatureServiceService"
        ]
      }
    },
    "/ListFeatureServices": {
      "get": {
        "operationId": "FeatureServiceService_ListFeatureServices",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiListFeatureServicesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/gatewayruntimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "project",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "FeatureServiceService"
        ]
      }
    },
    "/UpdateFeatureService": {
      "post": {
        "operationId": "FeatureServiceService_UpdateFeatureService",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiFeatureService"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/gatewayruntimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiFeatureService"
            }
          }
        ],
        "tags": [
          "FeatureServiceService"
        ]
      }
    },
    "/CreateFeatureView": {
      "post": {
        "operationId": "FeatureViewService_CreateFeatureView",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiFeatureView"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/gatewayruntimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiFeatureView"
            }
          }
        ],
        "tags": [
          "FeatureViewService"
        ]
      }
    },
    "/DeleteFeatureView": {
      "delete": {
        "operationId": "FeatureViewService_DeleteFeatureView",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/gatewayruntimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "project",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "FeatureViewService"
        ]
      }
    },
    "/GetFeatureView": {
      "get": {
        "operationId": "FeatureViewService_GetFeatureView",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiFeatureView"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/gatewayruntimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "project",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "FeatureViewService"
        ]
      }
    },
    "/ListFeatureViews": {
      "get": {
        "operationId": "FeatureViewService_ListFeatureViews",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiListFeatureViewsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/gatewayruntimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "project",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "FeatureViewService"
        ]
      }
    },
    "/ReportMI": {
      "post": {
        "operationId": "FeatureViewService_ReportMI",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiMaterializationInterval"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/gatewayruntimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiMaterializationInterval"
            }
          },
          {
            "name": "name",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "project",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "FeatureViewService"
        ]
      }
    },
    "/UpdateFeatureView": {
      "post": {
        "operationId": "FeatureViewService_UpdateFeatureView",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiFeatureView"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/gatewayruntimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiFeatureView"
            }
          }
        ],
        "tags": [
          "FeatureViewService"
        ]
      }
    },
    "/ListInfraObjects": {
      "get": {
        "operationId": "InfraObjectService_ListInfraObjects",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiListInfraObjectsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/gatewayruntimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "project",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "InfraObjectService"
        ]
      }
    },
    "/UpdateInfraObjects": {
      "post": {
        "operationId": "InfraObjectService_UpdateInfraObjects",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiUpdateInfraObjectsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/gatewayruntimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiInfraObjects"
            }
          },
          {
            "name": "project",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "InfraObjectService"
        ]
      }
    },
    "/CreateOnDemandFeatureView": {
      "post": {
        "operationId": "OnDemandFeatureViewService_CreateOnDemandFeatureView",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiOnDemandFeatureView"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/gatewayruntimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiOnDemandFeatureView"
            }
          }
        ],
        "tags": [
          "OnDemandFeatureViewService"
        ]
      }
    },
    "/DeleteOnDemandFeatureView": {
      "delete": {
        "operationId": "OnDemandFeatureViewService_DeleteOnDemandFeatureView",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/gatewayruntimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "project",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "OnDemandFeatureViewService"
        ]
      }
    },
    "/GetOnDemandFeatureView": {
      "get": {
        "operationId": "OnDemandFeatureViewService_GetOnDemandFeatureView",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiOnDemandFeatureView"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/gatewayruntimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "project",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "OnDemandFeatureViewService"
        ]
      }
    },
    "/ListOnDemandFeatureViews": {
      "get": {
        "operationId": "OnDemandFeatureViewService_ListOnDemandFeatureViews",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiListOnDemandFeatureViewsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/gatewayruntimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "project",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "OnDemandFeatureViewService"
        ]
      }
    },
    "/UpdateOnDemandFeatureView": {
      "post": {
        "operationId": "OnDemandFeatureViewService_UpdateOnDemandFeatureView",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiOnDemandFeatureView"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/gatewayruntimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiOnDemandFeatureView"
            }
          }
        ],
        "tags": [
          "OnDemandFeatureViewService"
        ]
      }
    },
    "/CreateProject": {
      "post": {
        "operationId": "ProjectService_CreateProject",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiProject"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/gatewayruntimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiProject"
            }
          }
        ],
        "tags": [
          "ProjectService"
        ]
      }
    },
    "/DeleteProject": {
      "delete": {
        "operationId": "ProjectService_DeleteProject",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/gatewayruntimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "project",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "ProjectService"
        ]
      }
    },
    "/GetProject": {
      "get": {
        "operationId": "ProjectService_GetProject",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiProject"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/gatewayruntimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "project",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "ProjectService"
        ]
      }
    },
    "/UpdateProject": {
      "post": {
        "operationId": "ProjectService_UpdateProject",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiProject"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/gatewayruntimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiProject"
            }
          }
        ],
        "tags": [
          "ProjectService"
        ]
      }
    },
    "/CreateRequestFeatureView": {
      "post": {
        "operationId": "RequestFeatureViewService_CreateRequestFeatureView",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiRequestFeatureView"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/gatewayruntimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiRequestFeatureView"
            }
          }
        ],
        "tags": [
          "RequestFeatureViewService"
        ]
      }
    },
    "/DeleteRequestFeatureView": {
      "delete": {
        "operationId": "RequestFeatureViewService_DeleteRequestFeatureView",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/gatewayruntimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "project",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "RequestFeatureViewService"
        ]
      }
    },
    "/GetRequestFeatureView": {
      "get": {
        "operationId": "RequestFeatureViewService_GetRequestFeatureView",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiRequestFeatureView"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/gatewayruntimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "project",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "RequestFeatureViewService"
        ]
      }
    },
    "/ListRequestFeatureViews": {
      "get": {
        "operationId": "RequestFeatureViewService_ListRequestFeatureViews",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiListRequestFeatureViewsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/gatewayruntimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "project",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "RequestFeatureViewService"
        ]
      }
    },
    "/UpdateRequestFeatureView": {
      "post": {
        "operationId": "RequestFeatureViewService_UpdateRequestFeatureView",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiRequestFeatureView"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/gatewayruntimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiRequestFeatureView"
            }
          }
        ],
        "tags": [
          "RequestFeatureViewService"
        ]
      }
    },
    "/CreateSavedDataset": {
      "post": {
        "operationId": "SavedDatasetService_CreateSavedDataset",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiSavedDataset"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/gatewayruntimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiSavedDataset"
            }
          }
        ],
        "tags": [
          "SavedDatasetService"
        ]
      }
    },
    "/DeleteSavedDataset": {
      "delete": {
        "operationId": "SavedDatasetService_DeleteSavedDataset",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/gatewayruntimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "project",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "SavedDatasetService"
        ]
      }
    },
    "/GetSavedDataset": {
      "get": {
        "operationId": "SavedDatasetService_GetSavedDataset",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiSavedDataset"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/gatewayruntimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "project",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "SavedDatasetService"
        ]
      }
    },
    "/ListSavedDatasets": {
      "get": {
        "operationId": "SavedDatasetService_ListSavedDatasets",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiListSavedDatasetsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/gatewayruntimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "project",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "SavedDatasetService"
        ]
      }
    },
    "/UpdateSavedDataset": {
      "post": {
        "operationId": "SavedDatasetService_UpdateSavedDataset",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiSavedDataset"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/gatewayruntimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiSavedDataset"
            }
          }
        ],
        "tags": [
          "SavedDatasetService"
        ]
      }
    }
  },
  "definitions": {
    "DataSourceSourceType": {
      "type": "string",
      "enum": [
        "INVALID",
        "BATCH_FILE",
        "BATCH_SNOWFLAKE",
        "BATCH_BIGQUERY",
        "BATCH_REDSHIFT",
        "STREAM_KAFKA",
        "STREAM_KINESIS",
        "CUSTOM_SOURCE",
        "REQUEST_SOURCE",
        "PUSH_SOURCE",
        "BATCH_TRINO",
        "BATCH_SPARK"
      ],
      "default": "INVALID",
      "description": "Type of data source."
    },
    "apiDataSource": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Unique name of data source within the project."
        },
        "project": {
          "type": "string",
          "description": "Name of Feast project that this data source belongs to."
        },
        "description": {
          "type": "string",
          "description": "Description of the data source."
        },
        "tags": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "User defined metadata."
        },
        "owner": {
          "type": "string",
          "description": "Owner of the data source."
        },
        "type": {
          "$ref": "#/definitions/DataSourceSourceType",
          "description": "Type of the data source."
        },
        "field_mapping": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Defines mapping between fields in the sourced data and fields in parent FeatureView."
        },
        "timestamp_field": {
          "type": "string",
          "description": "Event timestamp column name."
        },
        "date_partition_column": {
          "type": "string",
          "description": "Partition column (useful for file sources)."
        },
        "created_timestamp_column": {
          "type": "string",
          "description": "Creation timestamp column name."
        },
        "data_source_class_type": {
          "type": "string",
          "description": "This is an internal field that represents the Python class of the data source object a proto object represents.\nThis should be set by Feast, and not by users.\nThe field is used primarily by custom data sources and is mandatory for them to set.\nFeast may set it for first party sources as well."
        },
        "batch_source": {
          "type": "string",
          "description": "Optional batch source for streaming sources for historical features and materialization.\nProtobuf object transformed to a JSON string."
        },
        "options": {
          "type": "string",
          "description": "DataSource options.\nProtobuf object transformed to a JSON string."
        }
      }
    },
    "apiListDataSourcesResponse": {
      "type": "object",
      "properties": {
        "data_sources": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiDataSource"
          }
        }
      }
    },
    "gatewayruntimeError": {
      "type": "object",
      "properties": {
        "error": {
          "type": "string"
        },
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "type_url": {
          "type": "string",
          "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
        },
        "value": {
          "type": "string",
          "format": "byte",
          "description": "Must be a valid serialized protocol buffer of the above specified type."
        }
      },
      "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(&foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n\n Example 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\n Example 4: Pack and unpack a message in Go\n\n     foo := &pb.Foo{...}\n     any, err := ptypes.MarshalAny(foo)\n     ...\n     foo := &pb.Foo{}\n     if err := ptypes.UnmarshalAny(any, foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\n\nJSON\n====\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": <string>,\n      \"lastName\": <string>\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
    },
    "ValueTypeEnum": {
      "type": "string",
      "enum": [
        "INVALID",
        "BYTES",
        "STRING",
        "INT32",
        "INT64",
        "DOUBLE",
        "FLOAT",
        "BOOL",
        "UNIX_TIMESTAMP",
        "BYTES_LIST",
        "STRING_LIST",
        "INT32_LIST",
        "INT64_LIST",
        "DOUBLE_LIST",
        "FLOAT_LIST",
        "BOOL_LIST",
        "UNIX_TIMESTAMP_LIST",
        "NULL"
      ],
      "default": "INVALID"
    },
    "apiEntity": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the entity."
        },
        "project": {
          "type": "string",
          "description": "Name of Feast project that this entity belongs to."
        },
        "value_type": {
          "$ref": "#/definitions/ValueTypeEnum",
          "description": "Type of the entity."
        },
        "description": {
          "type": "string",
          "description": "Description of the entity."
        },
        "join_key": {
          "type": "string",
          "description": "Join key for the entity (i.e. name of the column the entity maps to)."
        },
        "tags": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "User defined metadata."
        },
        "owner": {
          "type": "string",
          "description": "Owner of the entity."
        },
        "created_timestamp": {
          "type": "string",
          "format": "date-time",
          "description": "Creation time of the entity."
        },
        "last_updated_timestamp": {
          "type": "string",
          "format": "date-time",
          "description": "Last update time of the entity."
        }
      }
    },
    "apiListEntitiesResponse": {
      "type": "object",
      "properties": {
        "entities": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiEntity"
          }
        }
      }
    },
    "apiFeature": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the feature. Not updatable."
        },
        "value_type": {
          "$ref": "#/definitions/ValueTypeEnum",
          "description": "Value type of the feature. Not updatable."
        },
        "tags": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Tags for user defined metadata on a feature."
        }
      }
    },
    "apiFeatureService": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the feature service. Must be unique. Not updated."
        },
        "project": {
          "type": "string",
          "description": "Name of Feast project that this feature service belongs to."
        },
        "features": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiFeatureViewProjection"
          },
          "description": "Represents a projection that's to be applied on top of the FeatureView.\nContains data such as the features to use from a FeatureView."
        },
        "tags": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "User defined metadata."
        },
        "description": {
          "type": "string",
          "description": "Description of the feature service."
        },
        "owner": {
          "type": "string",
          "description": "Owner of the feature service."
        },
        "logging_config": {
          "type": "string",
          "description": "(optional) If provided logging will be enabled for this feature service.\nProtobuf object transformed to a JSON string."
        },
        "created_timestamp": {
          "type": "string",
          "format": "date-time",
          "description": "Creation time of the feature service."
        },
        "last_updated_timestamp": {
          "type": "string",
          "format": "date-time",
          "description": "Last update time of the feature service."
        }
      }
    },
    "apiFeatureViewProjection": {
      "type": "object",
      "properties": {
        "feature_view_name": {
          "type": "string",
          "description": "The feature view name."
        },
        "feature_view_name_alias": {
          "type": "string",
          "description": "Alias for feature view name."
        },
        "feature_columns": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiFeature"
          },
          "description": "The features of the feature view that are a part of the feature reference."
        },
        "join_key_map": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Map for entity join_key overrides feature data entity join_key to entity data join_key."
        }
      }
    },
    "apiListFeatureServicesResponse": {
      "type": "object",
      "properties": {
        "feature_services": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiFeatureService"
          }
        }
      }
    },
    "apiFeatureView": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the feature view. Must be unique. Not updated."
        },
        "project": {
          "type": "string",
          "description": "Name of Feast project that this feature view belongs to."
        },
        "entities": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "List names of entities to associate with the features defined in this feature view. Not updatable."
        },
        "features": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiFeature"
          },
          "description": "List of specifications for each field defined as part of this feature view."
        },
        "description": {
          "type": "string",
          "description": "Description of the feature view."
        },
        "tags": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "User defined metadata."
        },
        "owner": {
          "type": "string",
          "description": "Owner of the feature view."
        },
        "ttl": {
          "type": "string",
          "description": "Features in this feature view can only be retrieved from online serving younger than ttl.\nTtl is measured as the duration of time between the feature's event timestamp and when the feature is retrieved.\nFeature values outside ttl will be returned as unset values and indicated to end user."
        },
        "batch_source": {
          "type": "string",
          "description": "Batch/Offline DataSource where this view can retrieve offline feature data.\nProtobuf object transformed to a JSON string."
        },
        "stream_source": {
          "type": "string",
          "description": "Streaming DataSource from where this view can consume \"online\" feature data.\nProtobuf object transformed to a JSON string."
        },
        "online": {
          "type": "boolean",
          "description": "Whether these features should be served online or not."
        },
        "created_timestamp": {
          "type": "string",
          "format": "date-time",
          "description": "Creation time of the feature view."
        },
        "last_updated_timestamp": {
          "type": "string",
          "format": "date-time",
          "description": "Last update time of the feature view."
        },
        "materialization_intervals": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiMaterializationInterval"
          },
          "description": "List of pairs (start_time, end_time) for which this feature view has been materialized."
        }
      }
    },
    "apiListFeatureViewsResponse": {
      "type": "object",
      "properties": {
        "feature_views": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiFeatureView"
          }
        }
      }
    },
    "apiMaterializationInterval": {
      "type": "object",
      "properties": {
        "start_time": {
          "type": "string",
          "format": "date-time"
        },
        "end_time": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "apiInfraObject": {
      "type": "object",
      "properties": {
        "infra_object_class_type": {
          "type": "string",
          "description": "Represents the Python class for the infrastructure object."
        },
        "infra_object": {
          "type": "string",
          "description": "The infrastructure object.\nProtobuf object transformed to a JSON string."
        }
      }
    },
    "apiInfraObjects": {
      "type": "object",
      "properties": {
        "objects": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiInfraObject"
          }
        }
      }
    },
    "apiListInfraObjectsResponse": {
      "type": "object",
      "properties": {
        "infra_objects": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiInfraObject"
          }
        }
      }
    },
    "apiUpdateInfraObjectsResponse": {
      "type": "object",
      "properties": {
        "infra_objects": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiInfraObject"
          }
        }
      }
    },
    "apiListOnDemandFeatureViewsResponse": {
      "type": "object",
      "properties": {
        "on_demand_feature_views": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiOnDemandFeatureView"
          }
        }
      }
    },
    "apiOnDemandFeatureView": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the on demand feature view. Must be unique. Not updated."
        },
        "project": {
          "type": "string",
          "description": "Name of Feast project that this on demand feature view belongs to."
        },
        "features": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiFeature"
          },
          "description": "List of features specifications for each feature defined with this on demand feature view."
        },
        "sources": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Map of sources for this on demand feature view.\nSources are transformed from Protobuf objects to JSON strings."
        },
        "user_defined_function": {
          "$ref": "#/definitions/apiUserDefinedFunction",
          "description": "User defined function."
        },
        "description": {
          "type": "string",
          "description": "Description of the on demand feature view."
        },
        "tags": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "User defined metadata."
        },
        "owner": {
          "type": "string",
          "description": "Owner of the on demand feature view."
        },
        "created_timestamp": {
          "type": "string",
          "format": "date-time",
          "description": "Creation time of the on demand feature view."
        },
        "last_updated_timestamp": {
          "type": "string",
          "format": "date-time",
          "description": "Last update time of the on demand feature view."
        }
      }
    },
    "apiUserDefinedFunction": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The function name."
        },
        "body": {
          "type": "string",
          "format": "byte",
          "description": "The Python-syntax function body (serialized by dill)."
        }
      },
      "description": "Serialized representation of Python function."
    },
    "apiProject": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of Feast project."
        },
        "registry_schema_version": {
          "type": "string"
        },
        "version_id": {
          "type": "string"
        },
        "last_updated": {
          "type": "string",
          "format": "date-time",
          "description": "Last update time of the project."
        }
      }
    },
    "apiListRequestFeatureViewsResponse": {
      "type": "object",
      "properties": {
        "request_feature_views": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiRequestFeatureView"
          }
        }
      }
    },
    "apiRequestFeatureView": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the request feature view. Must be unique. Not updated."
        },
        "project": {
          "type": "string",
          "description": "Name of Feast project that this request feature view belongs to."
        },
        "request_data_source": {
          "type": "string",
          "description": "Request data source which contains the underlying data schema and list of associated features.\nProtobuf object transformed to a JSON string."
        },
        "description": {
          "type": "string",
          "description": "Description of the request feature view."
        },
        "tags": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "User defined metadata."
        },
        "owner": {
          "type": "string",
          "description": "Owner of the request feature view."
        }
      }
    },
    "apiListSavedDatasetsResponse": {
      "type": "object",
      "properties": {
        "saved_datasets": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiSavedDataset"
          }
        }
      }
    },
    "apiSavedDataset": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the dataset. Must be unique since it's possible to overwrite dataset by name."
        },
        "project": {
          "type": "string",
          "description": "Name of Feast project that this dataset belongs to."
        },
        "features": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "List of feature references with format \"<view name>:<feature name>\"."
        },
        "join_keys": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Entity columns + request columns from all feature views used during retrieval."
        },
        "full_feature_names": {
          "type": "boolean",
          "description": "Whether full feature names are used in stored data."
        },
        "storage": {
          "type": "string",
          "description": "Storage location of the saved dataset.\nProtobuf object transformed to a JSON string."
        },
        "feature_service_name": {
          "type": "string",
          "description": "Optional and only populated if generated from a feature service fetch."
        },
        "tags": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "User defined metadata."
        },
        "created_timestamp": {
          "type": "string",
          "format": "date-time",
          "description": "Creation time of the saved dataset."
        },
        "last_updated_timestamp": {
          "type": "string",
          "format": "date-time",
          "description": "Last update time of the saved dataset."
        },
        "min_event_timestamp": {
          "type": "string",
          "format": "date-time",
          "description": "Min timestamp in the dataset (needed for retrieval)."
        },
        "max_event_timestamp": {
          "type": "string",
          "format": "date-time",
          "description": "Max timestamp in the dataset (needed for retrieval)."
        }
      }
    }
  },
  "securityDefinitions": {
    "Bearer": {
      "type": "apiKey",
      "name": "authorization",
      "in": "header"
    }
  },
  "security": [
    {
      "Bearer": []
    }
  ]
}
