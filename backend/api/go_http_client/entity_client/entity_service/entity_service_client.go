// Code generated by go-swagger; DO NOT EDIT.

package entity_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new entity service API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for entity service API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
EntityServiceCreateEntity entity service create entity API
*/
func (a *Client) EntityServiceCreateEntity(params *EntityServiceCreateEntityParams, authInfo runtime.ClientAuthInfoWriter) (*EntityServiceCreateEntityOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEntityServiceCreateEntityParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "EntityService_CreateEntity",
		Method:             "POST",
		PathPattern:        "/CreateEntity",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &EntityServiceCreateEntityReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*EntityServiceCreateEntityOK), nil

}

/*
EntityServiceDeleteEntity entity service delete entity API
*/
func (a *Client) EntityServiceDeleteEntity(params *EntityServiceDeleteEntityParams, authInfo runtime.ClientAuthInfoWriter) (*EntityServiceDeleteEntityOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEntityServiceDeleteEntityParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "EntityService_DeleteEntity",
		Method:             "DELETE",
		PathPattern:        "/DeleteEntity",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &EntityServiceDeleteEntityReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*EntityServiceDeleteEntityOK), nil

}

/*
EntityServiceGetEntity entity service get entity API
*/
func (a *Client) EntityServiceGetEntity(params *EntityServiceGetEntityParams, authInfo runtime.ClientAuthInfoWriter) (*EntityServiceGetEntityOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEntityServiceGetEntityParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "EntityService_GetEntity",
		Method:             "GET",
		PathPattern:        "/GetEntity",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &EntityServiceGetEntityReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*EntityServiceGetEntityOK), nil

}

/*
EntityServiceListEntities entity service list entities API
*/
func (a *Client) EntityServiceListEntities(params *EntityServiceListEntitiesParams, authInfo runtime.ClientAuthInfoWriter) (*EntityServiceListEntitiesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEntityServiceListEntitiesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "EntityService_ListEntities",
		Method:             "GET",
		PathPattern:        "/ListEntities",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &EntityServiceListEntitiesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*EntityServiceListEntitiesOK), nil

}

/*
EntityServiceUpdateEntity entity service update entity API
*/
func (a *Client) EntityServiceUpdateEntity(params *EntityServiceUpdateEntityParams, authInfo runtime.ClientAuthInfoWriter) (*EntityServiceUpdateEntityOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEntityServiceUpdateEntityParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "EntityService_UpdateEntity",
		Method:             "POST",
		PathPattern:        "/UpdateEntity",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &EntityServiceUpdateEntityReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*EntityServiceUpdateEntityOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
