// Code generated by go-swagger; DO NOT EDIT.

package project_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new project service API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for project service API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
ProjectServiceCreateProject project service create project API
*/
func (a *Client) ProjectServiceCreateProject(params *ProjectServiceCreateProjectParams, authInfo runtime.ClientAuthInfoWriter) (*ProjectServiceCreateProjectOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectServiceCreateProjectParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ProjectService_CreateProject",
		Method:             "POST",
		PathPattern:        "/CreateProject",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProjectServiceCreateProjectReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ProjectServiceCreateProjectOK), nil

}

/*
ProjectServiceDeleteProject project service delete project API
*/
func (a *Client) ProjectServiceDeleteProject(params *ProjectServiceDeleteProjectParams, authInfo runtime.ClientAuthInfoWriter) (*ProjectServiceDeleteProjectOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectServiceDeleteProjectParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ProjectService_DeleteProject",
		Method:             "DELETE",
		PathPattern:        "/DeleteProject",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProjectServiceDeleteProjectReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ProjectServiceDeleteProjectOK), nil

}

/*
ProjectServiceGetProject project service get project API
*/
func (a *Client) ProjectServiceGetProject(params *ProjectServiceGetProjectParams, authInfo runtime.ClientAuthInfoWriter) (*ProjectServiceGetProjectOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectServiceGetProjectParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ProjectService_GetProject",
		Method:             "GET",
		PathPattern:        "/GetProject",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProjectServiceGetProjectReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ProjectServiceGetProjectOK), nil

}

/*
ProjectServiceUpdateProject project service update project API
*/
func (a *Client) ProjectServiceUpdateProject(params *ProjectServiceUpdateProjectParams, authInfo runtime.ClientAuthInfoWriter) (*ProjectServiceUpdateProjectOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectServiceUpdateProjectParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ProjectService_UpdateProject",
		Method:             "POST",
		PathPattern:        "/UpdateProject",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProjectServiceUpdateProjectReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ProjectServiceUpdateProjectOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
