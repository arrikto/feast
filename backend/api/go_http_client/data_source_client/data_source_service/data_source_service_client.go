// Code generated by go-swagger; DO NOT EDIT.

package data_source_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new data source service API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for data source service API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DataSourceServiceCreateDataSource data source service create data source API
*/
func (a *Client) DataSourceServiceCreateDataSource(params *DataSourceServiceCreateDataSourceParams, authInfo runtime.ClientAuthInfoWriter) (*DataSourceServiceCreateDataSourceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDataSourceServiceCreateDataSourceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DataSourceService_CreateDataSource",
		Method:             "POST",
		PathPattern:        "/CreateDataSource",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DataSourceServiceCreateDataSourceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DataSourceServiceCreateDataSourceOK), nil

}

/*
DataSourceServiceDeleteDataSource data source service delete data source API
*/
func (a *Client) DataSourceServiceDeleteDataSource(params *DataSourceServiceDeleteDataSourceParams, authInfo runtime.ClientAuthInfoWriter) (*DataSourceServiceDeleteDataSourceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDataSourceServiceDeleteDataSourceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DataSourceService_DeleteDataSource",
		Method:             "DELETE",
		PathPattern:        "/DeleteDataSource",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DataSourceServiceDeleteDataSourceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DataSourceServiceDeleteDataSourceOK), nil

}

/*
DataSourceServiceGetDataSource data source service get data source API
*/
func (a *Client) DataSourceServiceGetDataSource(params *DataSourceServiceGetDataSourceParams, authInfo runtime.ClientAuthInfoWriter) (*DataSourceServiceGetDataSourceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDataSourceServiceGetDataSourceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DataSourceService_GetDataSource",
		Method:             "GET",
		PathPattern:        "/GetDataSource",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DataSourceServiceGetDataSourceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DataSourceServiceGetDataSourceOK), nil

}

/*
DataSourceServiceListDataSources data source service list data sources API
*/
func (a *Client) DataSourceServiceListDataSources(params *DataSourceServiceListDataSourcesParams, authInfo runtime.ClientAuthInfoWriter) (*DataSourceServiceListDataSourcesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDataSourceServiceListDataSourcesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DataSourceService_ListDataSources",
		Method:             "GET",
		PathPattern:        "/ListDataSources",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DataSourceServiceListDataSourcesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DataSourceServiceListDataSourcesOK), nil

}

/*
DataSourceServiceUpdateDataSource data source service update data source API
*/
func (a *Client) DataSourceServiceUpdateDataSource(params *DataSourceServiceUpdateDataSourceParams, authInfo runtime.ClientAuthInfoWriter) (*DataSourceServiceUpdateDataSourceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDataSourceServiceUpdateDataSourceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DataSourceService_UpdateDataSource",
		Method:             "POST",
		PathPattern:        "/UpdateDataSource",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DataSourceServiceUpdateDataSourceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DataSourceServiceUpdateDataSourceOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
