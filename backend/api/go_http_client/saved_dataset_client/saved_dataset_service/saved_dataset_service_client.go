// Code generated by go-swagger; DO NOT EDIT.

package saved_dataset_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new saved dataset service API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for saved dataset service API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
SavedDatasetServiceCreateSavedDataset saved dataset service create saved dataset API
*/
func (a *Client) SavedDatasetServiceCreateSavedDataset(params *SavedDatasetServiceCreateSavedDatasetParams, authInfo runtime.ClientAuthInfoWriter) (*SavedDatasetServiceCreateSavedDatasetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSavedDatasetServiceCreateSavedDatasetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "SavedDatasetService_CreateSavedDataset",
		Method:             "POST",
		PathPattern:        "/CreateSavedDataset",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SavedDatasetServiceCreateSavedDatasetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SavedDatasetServiceCreateSavedDatasetOK), nil

}

/*
SavedDatasetServiceDeleteSavedDataset saved dataset service delete saved dataset API
*/
func (a *Client) SavedDatasetServiceDeleteSavedDataset(params *SavedDatasetServiceDeleteSavedDatasetParams, authInfo runtime.ClientAuthInfoWriter) (*SavedDatasetServiceDeleteSavedDatasetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSavedDatasetServiceDeleteSavedDatasetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "SavedDatasetService_DeleteSavedDataset",
		Method:             "DELETE",
		PathPattern:        "/DeleteSavedDataset",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SavedDatasetServiceDeleteSavedDatasetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SavedDatasetServiceDeleteSavedDatasetOK), nil

}

/*
SavedDatasetServiceGetSavedDataset saved dataset service get saved dataset API
*/
func (a *Client) SavedDatasetServiceGetSavedDataset(params *SavedDatasetServiceGetSavedDatasetParams, authInfo runtime.ClientAuthInfoWriter) (*SavedDatasetServiceGetSavedDatasetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSavedDatasetServiceGetSavedDatasetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "SavedDatasetService_GetSavedDataset",
		Method:             "GET",
		PathPattern:        "/GetSavedDataset",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SavedDatasetServiceGetSavedDatasetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SavedDatasetServiceGetSavedDatasetOK), nil

}

/*
SavedDatasetServiceListSavedDatasets saved dataset service list saved datasets API
*/
func (a *Client) SavedDatasetServiceListSavedDatasets(params *SavedDatasetServiceListSavedDatasetsParams, authInfo runtime.ClientAuthInfoWriter) (*SavedDatasetServiceListSavedDatasetsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSavedDatasetServiceListSavedDatasetsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "SavedDatasetService_ListSavedDatasets",
		Method:             "GET",
		PathPattern:        "/ListSavedDatasets",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SavedDatasetServiceListSavedDatasetsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SavedDatasetServiceListSavedDatasetsOK), nil

}

/*
SavedDatasetServiceUpdateSavedDataset saved dataset service update saved dataset API
*/
func (a *Client) SavedDatasetServiceUpdateSavedDataset(params *SavedDatasetServiceUpdateSavedDatasetParams, authInfo runtime.ClientAuthInfoWriter) (*SavedDatasetServiceUpdateSavedDatasetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSavedDatasetServiceUpdateSavedDatasetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "SavedDatasetService_UpdateSavedDataset",
		Method:             "POST",
		PathPattern:        "/UpdateSavedDataset",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SavedDatasetServiceUpdateSavedDatasetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SavedDatasetServiceUpdateSavedDatasetOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
