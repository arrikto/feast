// Code generated by go-swagger; DO NOT EDIT.

package feature_service_model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// APIFeatureService api feature service
// swagger:model apiFeatureService
type APIFeatureService struct {

	// Creation time of the feature service.
	// Format: date-time
	CreatedTimestamp strfmt.DateTime `json:"created_timestamp,omitempty"`

	// Description of the feature service.
	Description string `json:"description,omitempty"`

	// Represents a projection that's to be applied on top of the FeatureView.
	// Contains data such as the features to use from a FeatureView.
	Features []*APIFeatureViewProjection `json:"features"`

	// Last update time of the feature service.
	// Format: date-time
	LastUpdatedTimestamp strfmt.DateTime `json:"last_updated_timestamp,omitempty"`

	// (optional) If provided logging will be enabled for this feature service.
	// Protobuf object transformed to a JSON string.
	LoggingConfig string `json:"logging_config,omitempty"`

	// Name of the feature service. Must be unique. Not updated.
	Name string `json:"name,omitempty"`

	// Owner of the feature service.
	Owner string `json:"owner,omitempty"`

	// Name of Feast project that this feature service belongs to.
	Project string `json:"project,omitempty"`

	// User defined metadata.
	Tags map[string]string `json:"tags,omitempty"`
}

// Validate validates this api feature service
func (m *APIFeatureService) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFeatures(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastUpdatedTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *APIFeatureService) validateCreatedTimestamp(formats strfmt.Registry) error {

	if swag.IsZero(m.CreatedTimestamp) { // not required
		return nil
	}

	if err := validate.FormatOf("created_timestamp", "body", "date-time", m.CreatedTimestamp.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *APIFeatureService) validateFeatures(formats strfmt.Registry) error {

	if swag.IsZero(m.Features) { // not required
		return nil
	}

	for i := 0; i < len(m.Features); i++ {
		if swag.IsZero(m.Features[i]) { // not required
			continue
		}

		if m.Features[i] != nil {
			if err := m.Features[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("features" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *APIFeatureService) validateLastUpdatedTimestamp(formats strfmt.Registry) error {

	if swag.IsZero(m.LastUpdatedTimestamp) { // not required
		return nil
	}

	if err := validate.FormatOf("last_updated_timestamp", "body", "date-time", m.LastUpdatedTimestamp.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *APIFeatureService) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *APIFeatureService) UnmarshalBinary(b []byte) error {
	var res APIFeatureService
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
