// Code generated by go-swagger; DO NOT EDIT.

package feature_view_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new feature view service API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for feature view service API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
FeatureViewServiceCreateFeatureView feature view service create feature view API
*/
func (a *Client) FeatureViewServiceCreateFeatureView(params *FeatureViewServiceCreateFeatureViewParams, authInfo runtime.ClientAuthInfoWriter) (*FeatureViewServiceCreateFeatureViewOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFeatureViewServiceCreateFeatureViewParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "FeatureViewService_CreateFeatureView",
		Method:             "POST",
		PathPattern:        "/CreateFeatureView",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &FeatureViewServiceCreateFeatureViewReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*FeatureViewServiceCreateFeatureViewOK), nil

}

/*
FeatureViewServiceDeleteFeatureView feature view service delete feature view API
*/
func (a *Client) FeatureViewServiceDeleteFeatureView(params *FeatureViewServiceDeleteFeatureViewParams, authInfo runtime.ClientAuthInfoWriter) (*FeatureViewServiceDeleteFeatureViewOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFeatureViewServiceDeleteFeatureViewParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "FeatureViewService_DeleteFeatureView",
		Method:             "DELETE",
		PathPattern:        "/DeleteFeatureView",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &FeatureViewServiceDeleteFeatureViewReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*FeatureViewServiceDeleteFeatureViewOK), nil

}

/*
FeatureViewServiceGetFeatureView feature view service get feature view API
*/
func (a *Client) FeatureViewServiceGetFeatureView(params *FeatureViewServiceGetFeatureViewParams, authInfo runtime.ClientAuthInfoWriter) (*FeatureViewServiceGetFeatureViewOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFeatureViewServiceGetFeatureViewParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "FeatureViewService_GetFeatureView",
		Method:             "GET",
		PathPattern:        "/GetFeatureView",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &FeatureViewServiceGetFeatureViewReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*FeatureViewServiceGetFeatureViewOK), nil

}

/*
FeatureViewServiceListFeatureViews feature view service list feature views API
*/
func (a *Client) FeatureViewServiceListFeatureViews(params *FeatureViewServiceListFeatureViewsParams, authInfo runtime.ClientAuthInfoWriter) (*FeatureViewServiceListFeatureViewsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFeatureViewServiceListFeatureViewsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "FeatureViewService_ListFeatureViews",
		Method:             "GET",
		PathPattern:        "/ListFeatureViews",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &FeatureViewServiceListFeatureViewsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*FeatureViewServiceListFeatureViewsOK), nil

}

/*
FeatureViewServiceReportMI feature view service report m i API
*/
func (a *Client) FeatureViewServiceReportMI(params *FeatureViewServiceReportMIParams, authInfo runtime.ClientAuthInfoWriter) (*FeatureViewServiceReportMIOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFeatureViewServiceReportMIParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "FeatureViewService_ReportMI",
		Method:             "POST",
		PathPattern:        "/ReportMI",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &FeatureViewServiceReportMIReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*FeatureViewServiceReportMIOK), nil

}

/*
FeatureViewServiceUpdateFeatureView feature view service update feature view API
*/
func (a *Client) FeatureViewServiceUpdateFeatureView(params *FeatureViewServiceUpdateFeatureViewParams, authInfo runtime.ClientAuthInfoWriter) (*FeatureViewServiceUpdateFeatureViewOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFeatureViewServiceUpdateFeatureViewParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "FeatureViewService_UpdateFeatureView",
		Method:             "POST",
		PathPattern:        "/UpdateFeatureView",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &FeatureViewServiceUpdateFeatureViewReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*FeatureViewServiceUpdateFeatureViewOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
