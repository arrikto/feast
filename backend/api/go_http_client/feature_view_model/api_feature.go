// Code generated by go-swagger; DO NOT EDIT.

package feature_view_model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// APIFeature api feature
// swagger:model apiFeature
type APIFeature struct {

	// Name of the feature. Not updatable.
	Name string `json:"name,omitempty"`

	// Tags for user defined metadata on a feature.
	Tags map[string]string `json:"tags,omitempty"`

	// Value type of the feature. Not updatable.
	ValueType ValueTypeEnum `json:"value_type,omitempty"`
}

// Validate validates this api feature
func (m *APIFeature) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateValueType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *APIFeature) validateValueType(formats strfmt.Registry) error {

	if swag.IsZero(m.ValueType) { // not required
		return nil
	}

	if err := m.ValueType.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("value_type")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *APIFeature) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *APIFeature) UnmarshalBinary(b []byte) error {
	var res APIFeature
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
