// Code generated by go-swagger; DO NOT EDIT.

package data_source_model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// APIDataSource api data source
// swagger:model apiDataSource
type APIDataSource struct {

	// Optional batch source for streaming sources for historical features and materialization.
	// Protobuf object transformed to a JSON string.
	BatchSource string `json:"batch_source,omitempty"`

	// Creation timestamp column name.
	CreatedTimestampColumn string `json:"created_timestamp_column,omitempty"`

	// This is an internal field that represents the Python class of the data source object a proto object represents.
	// This should be set by Feast, and not by users.
	// The field is used primarily by custom data sources and is mandatory for them to set.
	// Feast may set it for first party sources as well.
	DataSourceClassType string `json:"data_source_class_type,omitempty"`

	// Partition column (useful for file sources).
	DatePartitionColumn string `json:"date_partition_column,omitempty"`

	// Description of the data source.
	Description string `json:"description,omitempty"`

	// Defines mapping between fields in the sourced data and fields in parent FeatureView.
	FieldMapping map[string]string `json:"field_mapping,omitempty"`

	// Unique name of data source within the project.
	Name string `json:"name,omitempty"`

	// DataSource options.
	// Protobuf object transformed to a JSON string.
	Options string `json:"options,omitempty"`

	// Owner of the data source.
	Owner string `json:"owner,omitempty"`

	// Name of Feast project that this data source belongs to.
	Project string `json:"project,omitempty"`

	// User defined metadata.
	Tags map[string]string `json:"tags,omitempty"`

	// Event timestamp column name.
	TimestampField string `json:"timestamp_field,omitempty"`

	// Type of the data source.
	Type DataSourceSourceType `json:"type,omitempty"`
}

// Validate validates this api data source
func (m *APIDataSource) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *APIDataSource) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	if err := m.Type.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("type")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *APIDataSource) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *APIDataSource) UnmarshalBinary(b []byte) error {
	var res APIDataSource
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
