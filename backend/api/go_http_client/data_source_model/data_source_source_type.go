// Code generated by go-swagger; DO NOT EDIT.

package data_source_model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// DataSourceSourceType Type of data source.
// swagger:model DataSourceSourceType
type DataSourceSourceType string

const (

	// DataSourceSourceTypeINVALID captures enum value "INVALID"
	DataSourceSourceTypeINVALID DataSourceSourceType = "INVALID"

	// DataSourceSourceTypeBATCHFILE captures enum value "BATCH_FILE"
	DataSourceSourceTypeBATCHFILE DataSourceSourceType = "BATCH_FILE"

	// DataSourceSourceTypeBATCHSNOWFLAKE captures enum value "BATCH_SNOWFLAKE"
	DataSourceSourceTypeBATCHSNOWFLAKE DataSourceSourceType = "BATCH_SNOWFLAKE"

	// DataSourceSourceTypeBATCHBIGQUERY captures enum value "BATCH_BIGQUERY"
	DataSourceSourceTypeBATCHBIGQUERY DataSourceSourceType = "BATCH_BIGQUERY"

	// DataSourceSourceTypeBATCHREDSHIFT captures enum value "BATCH_REDSHIFT"
	DataSourceSourceTypeBATCHREDSHIFT DataSourceSourceType = "BATCH_REDSHIFT"

	// DataSourceSourceTypeSTREAMKAFKA captures enum value "STREAM_KAFKA"
	DataSourceSourceTypeSTREAMKAFKA DataSourceSourceType = "STREAM_KAFKA"

	// DataSourceSourceTypeSTREAMKINESIS captures enum value "STREAM_KINESIS"
	DataSourceSourceTypeSTREAMKINESIS DataSourceSourceType = "STREAM_KINESIS"

	// DataSourceSourceTypeCUSTOMSOURCE captures enum value "CUSTOM_SOURCE"
	DataSourceSourceTypeCUSTOMSOURCE DataSourceSourceType = "CUSTOM_SOURCE"

	// DataSourceSourceTypeREQUESTSOURCE captures enum value "REQUEST_SOURCE"
	DataSourceSourceTypeREQUESTSOURCE DataSourceSourceType = "REQUEST_SOURCE"

	// DataSourceSourceTypePUSHSOURCE captures enum value "PUSH_SOURCE"
	DataSourceSourceTypePUSHSOURCE DataSourceSourceType = "PUSH_SOURCE"

	// DataSourceSourceTypeBATCHTRINO captures enum value "BATCH_TRINO"
	DataSourceSourceTypeBATCHTRINO DataSourceSourceType = "BATCH_TRINO"

	// DataSourceSourceTypeBATCHSPARK captures enum value "BATCH_SPARK"
	DataSourceSourceTypeBATCHSPARK DataSourceSourceType = "BATCH_SPARK"
)

// for schema
var dataSourceSourceTypeEnum []interface{}

func init() {
	var res []DataSourceSourceType
	if err := json.Unmarshal([]byte(`["INVALID","BATCH_FILE","BATCH_SNOWFLAKE","BATCH_BIGQUERY","BATCH_REDSHIFT","STREAM_KAFKA","STREAM_KINESIS","CUSTOM_SOURCE","REQUEST_SOURCE","PUSH_SOURCE","BATCH_TRINO","BATCH_SPARK"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		dataSourceSourceTypeEnum = append(dataSourceSourceTypeEnum, v)
	}
}

func (m DataSourceSourceType) validateDataSourceSourceTypeEnum(path, location string, value DataSourceSourceType) error {
	if err := validate.Enum(path, location, value, dataSourceSourceTypeEnum); err != nil {
		return err
	}
	return nil
}

// Validate validates this data source source type
func (m DataSourceSourceType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateDataSourceSourceTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
