// Code generated by go-swagger; DO NOT EDIT.

package feature_service_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new feature service service API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for feature service service API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
FeatureServiceServiceCreateFeatureService feature service service create feature service API
*/
func (a *Client) FeatureServiceServiceCreateFeatureService(params *FeatureServiceServiceCreateFeatureServiceParams, authInfo runtime.ClientAuthInfoWriter) (*FeatureServiceServiceCreateFeatureServiceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFeatureServiceServiceCreateFeatureServiceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "FeatureServiceService_CreateFeatureService",
		Method:             "POST",
		PathPattern:        "/CreateFeatureService",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &FeatureServiceServiceCreateFeatureServiceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*FeatureServiceServiceCreateFeatureServiceOK), nil

}

/*
FeatureServiceServiceDeleteFeatureService feature service service delete feature service API
*/
func (a *Client) FeatureServiceServiceDeleteFeatureService(params *FeatureServiceServiceDeleteFeatureServiceParams, authInfo runtime.ClientAuthInfoWriter) (*FeatureServiceServiceDeleteFeatureServiceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFeatureServiceServiceDeleteFeatureServiceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "FeatureServiceService_DeleteFeatureService",
		Method:             "DELETE",
		PathPattern:        "/DeleteFeatureService",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &FeatureServiceServiceDeleteFeatureServiceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*FeatureServiceServiceDeleteFeatureServiceOK), nil

}

/*
FeatureServiceServiceGetFeatureService feature service service get feature service API
*/
func (a *Client) FeatureServiceServiceGetFeatureService(params *FeatureServiceServiceGetFeatureServiceParams, authInfo runtime.ClientAuthInfoWriter) (*FeatureServiceServiceGetFeatureServiceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFeatureServiceServiceGetFeatureServiceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "FeatureServiceService_GetFeatureService",
		Method:             "GET",
		PathPattern:        "/GetFeatureService",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &FeatureServiceServiceGetFeatureServiceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*FeatureServiceServiceGetFeatureServiceOK), nil

}

/*
FeatureServiceServiceListFeatureServices feature service service list feature services API
*/
func (a *Client) FeatureServiceServiceListFeatureServices(params *FeatureServiceServiceListFeatureServicesParams, authInfo runtime.ClientAuthInfoWriter) (*FeatureServiceServiceListFeatureServicesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFeatureServiceServiceListFeatureServicesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "FeatureServiceService_ListFeatureServices",
		Method:             "GET",
		PathPattern:        "/ListFeatureServices",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &FeatureServiceServiceListFeatureServicesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*FeatureServiceServiceListFeatureServicesOK), nil

}

/*
FeatureServiceServiceUpdateFeatureService feature service service update feature service API
*/
func (a *Client) FeatureServiceServiceUpdateFeatureService(params *FeatureServiceServiceUpdateFeatureServiceParams, authInfo runtime.ClientAuthInfoWriter) (*FeatureServiceServiceUpdateFeatureServiceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFeatureServiceServiceUpdateFeatureServiceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "FeatureServiceService_UpdateFeatureService",
		Method:             "POST",
		PathPattern:        "/UpdateFeatureService",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &FeatureServiceServiceUpdateFeatureServiceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*FeatureServiceServiceUpdateFeatureServiceOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
