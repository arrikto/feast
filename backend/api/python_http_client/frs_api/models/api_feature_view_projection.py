# coding: utf-8

"""
    Feast Registry API

    This file contains REST API specification for Feast Registry. The file is autogenerated from the swagger definition.  # noqa: E501

    The version of the OpenAPI document: 0.0.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from frs_api.configuration import Configuration


class ApiFeatureViewProjection(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'feature_view_name': 'str',
        'feature_view_name_alias': 'str',
        'feature_columns': 'list[ApiFeature]',
        'join_key_map': 'dict(str, str)'
    }

    attribute_map = {
        'feature_view_name': 'feature_view_name',
        'feature_view_name_alias': 'feature_view_name_alias',
        'feature_columns': 'feature_columns',
        'join_key_map': 'join_key_map'
    }

    def __init__(self, feature_view_name=None, feature_view_name_alias=None, feature_columns=None, join_key_map=None, local_vars_configuration=None):  # noqa: E501
        """ApiFeatureViewProjection - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._feature_view_name = None
        self._feature_view_name_alias = None
        self._feature_columns = None
        self._join_key_map = None
        self.discriminator = None

        if feature_view_name is not None:
            self.feature_view_name = feature_view_name
        if feature_view_name_alias is not None:
            self.feature_view_name_alias = feature_view_name_alias
        if feature_columns is not None:
            self.feature_columns = feature_columns
        if join_key_map is not None:
            self.join_key_map = join_key_map

    @property
    def feature_view_name(self):
        """Gets the feature_view_name of this ApiFeatureViewProjection.  # noqa: E501

        The feature view name.  # noqa: E501

        :return: The feature_view_name of this ApiFeatureViewProjection.  # noqa: E501
        :rtype: str
        """
        return self._feature_view_name

    @feature_view_name.setter
    def feature_view_name(self, feature_view_name):
        """Sets the feature_view_name of this ApiFeatureViewProjection.

        The feature view name.  # noqa: E501

        :param feature_view_name: The feature_view_name of this ApiFeatureViewProjection.  # noqa: E501
        :type: str
        """

        self._feature_view_name = feature_view_name

    @property
    def feature_view_name_alias(self):
        """Gets the feature_view_name_alias of this ApiFeatureViewProjection.  # noqa: E501

        Alias for feature view name.  # noqa: E501

        :return: The feature_view_name_alias of this ApiFeatureViewProjection.  # noqa: E501
        :rtype: str
        """
        return self._feature_view_name_alias

    @feature_view_name_alias.setter
    def feature_view_name_alias(self, feature_view_name_alias):
        """Sets the feature_view_name_alias of this ApiFeatureViewProjection.

        Alias for feature view name.  # noqa: E501

        :param feature_view_name_alias: The feature_view_name_alias of this ApiFeatureViewProjection.  # noqa: E501
        :type: str
        """

        self._feature_view_name_alias = feature_view_name_alias

    @property
    def feature_columns(self):
        """Gets the feature_columns of this ApiFeatureViewProjection.  # noqa: E501

        The features of the feature view that are a part of the feature reference.  # noqa: E501

        :return: The feature_columns of this ApiFeatureViewProjection.  # noqa: E501
        :rtype: list[ApiFeature]
        """
        return self._feature_columns

    @feature_columns.setter
    def feature_columns(self, feature_columns):
        """Sets the feature_columns of this ApiFeatureViewProjection.

        The features of the feature view that are a part of the feature reference.  # noqa: E501

        :param feature_columns: The feature_columns of this ApiFeatureViewProjection.  # noqa: E501
        :type: list[ApiFeature]
        """

        self._feature_columns = feature_columns

    @property
    def join_key_map(self):
        """Gets the join_key_map of this ApiFeatureViewProjection.  # noqa: E501

        Map for entity join_key overrides feature data entity join_key to entity data join_key.  # noqa: E501

        :return: The join_key_map of this ApiFeatureViewProjection.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._join_key_map

    @join_key_map.setter
    def join_key_map(self, join_key_map):
        """Sets the join_key_map of this ApiFeatureViewProjection.

        Map for entity join_key overrides feature data entity join_key to entity data join_key.  # noqa: E501

        :param join_key_map: The join_key_map of this ApiFeatureViewProjection.  # noqa: E501
        :type: dict(str, str)
        """

        self._join_key_map = join_key_map

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApiFeatureViewProjection):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ApiFeatureViewProjection):
            return True

        return self.to_dict() != other.to_dict()
