# coding: utf-8

"""
    Feast Registry API

    This file contains REST API specification for Feast Registry. The file is autogenerated from the swagger definition.  # noqa: E501

    The version of the OpenAPI document: 0.0.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from frs_api.configuration import Configuration


class ApiOnDemandFeatureView(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'project': 'str',
        'features': 'list[ApiFeature]',
        'sources': 'dict(str, str)',
        'user_defined_function': 'ApiUserDefinedFunction',
        'description': 'str',
        'tags': 'dict(str, str)',
        'owner': 'str',
        'created_timestamp': 'datetime',
        'last_updated_timestamp': 'datetime'
    }

    attribute_map = {
        'name': 'name',
        'project': 'project',
        'features': 'features',
        'sources': 'sources',
        'user_defined_function': 'user_defined_function',
        'description': 'description',
        'tags': 'tags',
        'owner': 'owner',
        'created_timestamp': 'created_timestamp',
        'last_updated_timestamp': 'last_updated_timestamp'
    }

    def __init__(self, name=None, project=None, features=None, sources=None, user_defined_function=None, description=None, tags=None, owner=None, created_timestamp=None, last_updated_timestamp=None, local_vars_configuration=None):  # noqa: E501
        """ApiOnDemandFeatureView - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._name = None
        self._project = None
        self._features = None
        self._sources = None
        self._user_defined_function = None
        self._description = None
        self._tags = None
        self._owner = None
        self._created_timestamp = None
        self._last_updated_timestamp = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if project is not None:
            self.project = project
        if features is not None:
            self.features = features
        if sources is not None:
            self.sources = sources
        if user_defined_function is not None:
            self.user_defined_function = user_defined_function
        if description is not None:
            self.description = description
        if tags is not None:
            self.tags = tags
        if owner is not None:
            self.owner = owner
        if created_timestamp is not None:
            self.created_timestamp = created_timestamp
        if last_updated_timestamp is not None:
            self.last_updated_timestamp = last_updated_timestamp

    @property
    def name(self):
        """Gets the name of this ApiOnDemandFeatureView.  # noqa: E501

        Name of the on demand feature view. Must be unique. Not updated.  # noqa: E501

        :return: The name of this ApiOnDemandFeatureView.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ApiOnDemandFeatureView.

        Name of the on demand feature view. Must be unique. Not updated.  # noqa: E501

        :param name: The name of this ApiOnDemandFeatureView.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def project(self):
        """Gets the project of this ApiOnDemandFeatureView.  # noqa: E501

        Name of Feast project that this on demand feature view belongs to.  # noqa: E501

        :return: The project of this ApiOnDemandFeatureView.  # noqa: E501
        :rtype: str
        """
        return self._project

    @project.setter
    def project(self, project):
        """Sets the project of this ApiOnDemandFeatureView.

        Name of Feast project that this on demand feature view belongs to.  # noqa: E501

        :param project: The project of this ApiOnDemandFeatureView.  # noqa: E501
        :type: str
        """

        self._project = project

    @property
    def features(self):
        """Gets the features of this ApiOnDemandFeatureView.  # noqa: E501

        List of features specifications for each feature defined with this on demand feature view.  # noqa: E501

        :return: The features of this ApiOnDemandFeatureView.  # noqa: E501
        :rtype: list[ApiFeature]
        """
        return self._features

    @features.setter
    def features(self, features):
        """Sets the features of this ApiOnDemandFeatureView.

        List of features specifications for each feature defined with this on demand feature view.  # noqa: E501

        :param features: The features of this ApiOnDemandFeatureView.  # noqa: E501
        :type: list[ApiFeature]
        """

        self._features = features

    @property
    def sources(self):
        """Gets the sources of this ApiOnDemandFeatureView.  # noqa: E501

        Map of sources for this on demand feature view. Sources are transformed from Protobuf objects to JSON strings.  # noqa: E501

        :return: The sources of this ApiOnDemandFeatureView.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._sources

    @sources.setter
    def sources(self, sources):
        """Sets the sources of this ApiOnDemandFeatureView.

        Map of sources for this on demand feature view. Sources are transformed from Protobuf objects to JSON strings.  # noqa: E501

        :param sources: The sources of this ApiOnDemandFeatureView.  # noqa: E501
        :type: dict(str, str)
        """

        self._sources = sources

    @property
    def user_defined_function(self):
        """Gets the user_defined_function of this ApiOnDemandFeatureView.  # noqa: E501


        :return: The user_defined_function of this ApiOnDemandFeatureView.  # noqa: E501
        :rtype: ApiUserDefinedFunction
        """
        return self._user_defined_function

    @user_defined_function.setter
    def user_defined_function(self, user_defined_function):
        """Sets the user_defined_function of this ApiOnDemandFeatureView.


        :param user_defined_function: The user_defined_function of this ApiOnDemandFeatureView.  # noqa: E501
        :type: ApiUserDefinedFunction
        """

        self._user_defined_function = user_defined_function

    @property
    def description(self):
        """Gets the description of this ApiOnDemandFeatureView.  # noqa: E501

        Description of the on demand feature view.  # noqa: E501

        :return: The description of this ApiOnDemandFeatureView.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ApiOnDemandFeatureView.

        Description of the on demand feature view.  # noqa: E501

        :param description: The description of this ApiOnDemandFeatureView.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def tags(self):
        """Gets the tags of this ApiOnDemandFeatureView.  # noqa: E501

        User defined metadata.  # noqa: E501

        :return: The tags of this ApiOnDemandFeatureView.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this ApiOnDemandFeatureView.

        User defined metadata.  # noqa: E501

        :param tags: The tags of this ApiOnDemandFeatureView.  # noqa: E501
        :type: dict(str, str)
        """

        self._tags = tags

    @property
    def owner(self):
        """Gets the owner of this ApiOnDemandFeatureView.  # noqa: E501

        Owner of the on demand feature view.  # noqa: E501

        :return: The owner of this ApiOnDemandFeatureView.  # noqa: E501
        :rtype: str
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this ApiOnDemandFeatureView.

        Owner of the on demand feature view.  # noqa: E501

        :param owner: The owner of this ApiOnDemandFeatureView.  # noqa: E501
        :type: str
        """

        self._owner = owner

    @property
    def created_timestamp(self):
        """Gets the created_timestamp of this ApiOnDemandFeatureView.  # noqa: E501

        Creation time of the on demand feature view.  # noqa: E501

        :return: The created_timestamp of this ApiOnDemandFeatureView.  # noqa: E501
        :rtype: datetime
        """
        return self._created_timestamp

    @created_timestamp.setter
    def created_timestamp(self, created_timestamp):
        """Sets the created_timestamp of this ApiOnDemandFeatureView.

        Creation time of the on demand feature view.  # noqa: E501

        :param created_timestamp: The created_timestamp of this ApiOnDemandFeatureView.  # noqa: E501
        :type: datetime
        """

        self._created_timestamp = created_timestamp

    @property
    def last_updated_timestamp(self):
        """Gets the last_updated_timestamp of this ApiOnDemandFeatureView.  # noqa: E501

        Last update time of the on demand feature view.  # noqa: E501

        :return: The last_updated_timestamp of this ApiOnDemandFeatureView.  # noqa: E501
        :rtype: datetime
        """
        return self._last_updated_timestamp

    @last_updated_timestamp.setter
    def last_updated_timestamp(self, last_updated_timestamp):
        """Sets the last_updated_timestamp of this ApiOnDemandFeatureView.

        Last update time of the on demand feature view.  # noqa: E501

        :param last_updated_timestamp: The last_updated_timestamp of this ApiOnDemandFeatureView.  # noqa: E501
        :type: datetime
        """

        self._last_updated_timestamp = last_updated_timestamp

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApiOnDemandFeatureView):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ApiOnDemandFeatureView):
            return True

        return self.to_dict() != other.to_dict()
