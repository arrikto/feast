# coding: utf-8

"""
    Feast Registry API

    This file contains REST API specification for Feast Registry. The file is autogenerated from the swagger definition.  # noqa: E501

    The version of the OpenAPI document: 0.0.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from frs_api.configuration import Configuration


class ApiDataSource(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'project': 'str',
        'description': 'str',
        'tags': 'dict(str, str)',
        'owner': 'str',
        'type': 'DataSourceSourceType',
        'field_mapping': 'dict(str, str)',
        'timestamp_field': 'str',
        'date_partition_column': 'str',
        'created_timestamp_column': 'str',
        'data_source_class_type': 'str',
        'batch_source': 'str',
        'options': 'str'
    }

    attribute_map = {
        'name': 'name',
        'project': 'project',
        'description': 'description',
        'tags': 'tags',
        'owner': 'owner',
        'type': 'type',
        'field_mapping': 'field_mapping',
        'timestamp_field': 'timestamp_field',
        'date_partition_column': 'date_partition_column',
        'created_timestamp_column': 'created_timestamp_column',
        'data_source_class_type': 'data_source_class_type',
        'batch_source': 'batch_source',
        'options': 'options'
    }

    def __init__(self, name=None, project=None, description=None, tags=None, owner=None, type=None, field_mapping=None, timestamp_field=None, date_partition_column=None, created_timestamp_column=None, data_source_class_type=None, batch_source=None, options=None, local_vars_configuration=None):  # noqa: E501
        """ApiDataSource - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._name = None
        self._project = None
        self._description = None
        self._tags = None
        self._owner = None
        self._type = None
        self._field_mapping = None
        self._timestamp_field = None
        self._date_partition_column = None
        self._created_timestamp_column = None
        self._data_source_class_type = None
        self._batch_source = None
        self._options = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if project is not None:
            self.project = project
        if description is not None:
            self.description = description
        if tags is not None:
            self.tags = tags
        if owner is not None:
            self.owner = owner
        if type is not None:
            self.type = type
        if field_mapping is not None:
            self.field_mapping = field_mapping
        if timestamp_field is not None:
            self.timestamp_field = timestamp_field
        if date_partition_column is not None:
            self.date_partition_column = date_partition_column
        if created_timestamp_column is not None:
            self.created_timestamp_column = created_timestamp_column
        if data_source_class_type is not None:
            self.data_source_class_type = data_source_class_type
        if batch_source is not None:
            self.batch_source = batch_source
        if options is not None:
            self.options = options

    @property
    def name(self):
        """Gets the name of this ApiDataSource.  # noqa: E501

        Unique name of data source within the project.  # noqa: E501

        :return: The name of this ApiDataSource.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ApiDataSource.

        Unique name of data source within the project.  # noqa: E501

        :param name: The name of this ApiDataSource.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def project(self):
        """Gets the project of this ApiDataSource.  # noqa: E501

        Name of Feast project that this data source belongs to.  # noqa: E501

        :return: The project of this ApiDataSource.  # noqa: E501
        :rtype: str
        """
        return self._project

    @project.setter
    def project(self, project):
        """Sets the project of this ApiDataSource.

        Name of Feast project that this data source belongs to.  # noqa: E501

        :param project: The project of this ApiDataSource.  # noqa: E501
        :type: str
        """

        self._project = project

    @property
    def description(self):
        """Gets the description of this ApiDataSource.  # noqa: E501

        Description of the data source.  # noqa: E501

        :return: The description of this ApiDataSource.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ApiDataSource.

        Description of the data source.  # noqa: E501

        :param description: The description of this ApiDataSource.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def tags(self):
        """Gets the tags of this ApiDataSource.  # noqa: E501

        User defined metadata.  # noqa: E501

        :return: The tags of this ApiDataSource.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this ApiDataSource.

        User defined metadata.  # noqa: E501

        :param tags: The tags of this ApiDataSource.  # noqa: E501
        :type: dict(str, str)
        """

        self._tags = tags

    @property
    def owner(self):
        """Gets the owner of this ApiDataSource.  # noqa: E501

        Owner of the data source.  # noqa: E501

        :return: The owner of this ApiDataSource.  # noqa: E501
        :rtype: str
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this ApiDataSource.

        Owner of the data source.  # noqa: E501

        :param owner: The owner of this ApiDataSource.  # noqa: E501
        :type: str
        """

        self._owner = owner

    @property
    def type(self):
        """Gets the type of this ApiDataSource.  # noqa: E501


        :return: The type of this ApiDataSource.  # noqa: E501
        :rtype: DataSourceSourceType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ApiDataSource.


        :param type: The type of this ApiDataSource.  # noqa: E501
        :type: DataSourceSourceType
        """

        self._type = type

    @property
    def field_mapping(self):
        """Gets the field_mapping of this ApiDataSource.  # noqa: E501

        Defines mapping between fields in the sourced data and fields in parent FeatureView.  # noqa: E501

        :return: The field_mapping of this ApiDataSource.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._field_mapping

    @field_mapping.setter
    def field_mapping(self, field_mapping):
        """Sets the field_mapping of this ApiDataSource.

        Defines mapping between fields in the sourced data and fields in parent FeatureView.  # noqa: E501

        :param field_mapping: The field_mapping of this ApiDataSource.  # noqa: E501
        :type: dict(str, str)
        """

        self._field_mapping = field_mapping

    @property
    def timestamp_field(self):
        """Gets the timestamp_field of this ApiDataSource.  # noqa: E501

        Event timestamp column name.  # noqa: E501

        :return: The timestamp_field of this ApiDataSource.  # noqa: E501
        :rtype: str
        """
        return self._timestamp_field

    @timestamp_field.setter
    def timestamp_field(self, timestamp_field):
        """Sets the timestamp_field of this ApiDataSource.

        Event timestamp column name.  # noqa: E501

        :param timestamp_field: The timestamp_field of this ApiDataSource.  # noqa: E501
        :type: str
        """

        self._timestamp_field = timestamp_field

    @property
    def date_partition_column(self):
        """Gets the date_partition_column of this ApiDataSource.  # noqa: E501

        Partition column (useful for file sources).  # noqa: E501

        :return: The date_partition_column of this ApiDataSource.  # noqa: E501
        :rtype: str
        """
        return self._date_partition_column

    @date_partition_column.setter
    def date_partition_column(self, date_partition_column):
        """Sets the date_partition_column of this ApiDataSource.

        Partition column (useful for file sources).  # noqa: E501

        :param date_partition_column: The date_partition_column of this ApiDataSource.  # noqa: E501
        :type: str
        """

        self._date_partition_column = date_partition_column

    @property
    def created_timestamp_column(self):
        """Gets the created_timestamp_column of this ApiDataSource.  # noqa: E501

        Creation timestamp column name.  # noqa: E501

        :return: The created_timestamp_column of this ApiDataSource.  # noqa: E501
        :rtype: str
        """
        return self._created_timestamp_column

    @created_timestamp_column.setter
    def created_timestamp_column(self, created_timestamp_column):
        """Sets the created_timestamp_column of this ApiDataSource.

        Creation timestamp column name.  # noqa: E501

        :param created_timestamp_column: The created_timestamp_column of this ApiDataSource.  # noqa: E501
        :type: str
        """

        self._created_timestamp_column = created_timestamp_column

    @property
    def data_source_class_type(self):
        """Gets the data_source_class_type of this ApiDataSource.  # noqa: E501

        This is an internal field that represents the Python class of the data source object a proto object represents. This should be set by Feast, and not by users. The field is used primarily by custom data sources and is mandatory for them to set. Feast may set it for first party sources as well.  # noqa: E501

        :return: The data_source_class_type of this ApiDataSource.  # noqa: E501
        :rtype: str
        """
        return self._data_source_class_type

    @data_source_class_type.setter
    def data_source_class_type(self, data_source_class_type):
        """Sets the data_source_class_type of this ApiDataSource.

        This is an internal field that represents the Python class of the data source object a proto object represents. This should be set by Feast, and not by users. The field is used primarily by custom data sources and is mandatory for them to set. Feast may set it for first party sources as well.  # noqa: E501

        :param data_source_class_type: The data_source_class_type of this ApiDataSource.  # noqa: E501
        :type: str
        """

        self._data_source_class_type = data_source_class_type

    @property
    def batch_source(self):
        """Gets the batch_source of this ApiDataSource.  # noqa: E501

        Optional batch source for streaming sources for historical features and materialization. Protobuf object transformed to a JSON string.  # noqa: E501

        :return: The batch_source of this ApiDataSource.  # noqa: E501
        :rtype: str
        """
        return self._batch_source

    @batch_source.setter
    def batch_source(self, batch_source):
        """Sets the batch_source of this ApiDataSource.

        Optional batch source for streaming sources for historical features and materialization. Protobuf object transformed to a JSON string.  # noqa: E501

        :param batch_source: The batch_source of this ApiDataSource.  # noqa: E501
        :type: str
        """

        self._batch_source = batch_source

    @property
    def options(self):
        """Gets the options of this ApiDataSource.  # noqa: E501

        DataSource options. Protobuf object transformed to a JSON string.  # noqa: E501

        :return: The options of this ApiDataSource.  # noqa: E501
        :rtype: str
        """
        return self._options

    @options.setter
    def options(self, options):
        """Sets the options of this ApiDataSource.

        DataSource options. Protobuf object transformed to a JSON string.  # noqa: E501

        :param options: The options of this ApiDataSource.  # noqa: E501
        :type: str
        """

        self._options = options

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApiDataSource):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ApiDataSource):
            return True

        return self.to_dict() != other.to_dict()
