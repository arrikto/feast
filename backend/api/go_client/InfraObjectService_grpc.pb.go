// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package go_client

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// InfraObjectServiceClient is the client API for InfraObjectService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InfraObjectServiceClient interface {
	UpdateInfraObjects(ctx context.Context, in *UpdateInfraObjectsRequest, opts ...grpc.CallOption) (*UpdateInfraObjectsResponse, error)
	ListInfraObjects(ctx context.Context, in *ListInfraObjectsRequest, opts ...grpc.CallOption) (*ListInfraObjectsResponse, error)
}

type infraObjectServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewInfraObjectServiceClient(cc grpc.ClientConnInterface) InfraObjectServiceClient {
	return &infraObjectServiceClient{cc}
}

func (c *infraObjectServiceClient) UpdateInfraObjects(ctx context.Context, in *UpdateInfraObjectsRequest, opts ...grpc.CallOption) (*UpdateInfraObjectsResponse, error) {
	out := new(UpdateInfraObjectsResponse)
	err := c.cc.Invoke(ctx, "/api.InfraObjectService/UpdateInfraObjects", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraObjectServiceClient) ListInfraObjects(ctx context.Context, in *ListInfraObjectsRequest, opts ...grpc.CallOption) (*ListInfraObjectsResponse, error) {
	out := new(ListInfraObjectsResponse)
	err := c.cc.Invoke(ctx, "/api.InfraObjectService/ListInfraObjects", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InfraObjectServiceServer is the server API for InfraObjectService service.
// All implementations should embed UnimplementedInfraObjectServiceServer
// for forward compatibility
type InfraObjectServiceServer interface {
	UpdateInfraObjects(context.Context, *UpdateInfraObjectsRequest) (*UpdateInfraObjectsResponse, error)
	ListInfraObjects(context.Context, *ListInfraObjectsRequest) (*ListInfraObjectsResponse, error)
}

// UnimplementedInfraObjectServiceServer should be embedded to have forward compatible implementations.
type UnimplementedInfraObjectServiceServer struct {
}

func (UnimplementedInfraObjectServiceServer) UpdateInfraObjects(context.Context, *UpdateInfraObjectsRequest) (*UpdateInfraObjectsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateInfraObjects not implemented")
}
func (UnimplementedInfraObjectServiceServer) ListInfraObjects(context.Context, *ListInfraObjectsRequest) (*ListInfraObjectsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListInfraObjects not implemented")
}

// UnsafeInfraObjectServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InfraObjectServiceServer will
// result in compilation errors.
type UnsafeInfraObjectServiceServer interface {
	mustEmbedUnimplementedInfraObjectServiceServer()
}

func RegisterInfraObjectServiceServer(s grpc.ServiceRegistrar, srv InfraObjectServiceServer) {
	s.RegisterService(&InfraObjectService_ServiceDesc, srv)
}

func _InfraObjectService_UpdateInfraObjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateInfraObjectsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraObjectServiceServer).UpdateInfraObjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.InfraObjectService/UpdateInfraObjects",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraObjectServiceServer).UpdateInfraObjects(ctx, req.(*UpdateInfraObjectsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraObjectService_ListInfraObjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListInfraObjectsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraObjectServiceServer).ListInfraObjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.InfraObjectService/ListInfraObjects",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraObjectServiceServer).ListInfraObjects(ctx, req.(*ListInfraObjectsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// InfraObjectService_ServiceDesc is the grpc.ServiceDesc for InfraObjectService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InfraObjectService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.InfraObjectService",
	HandlerType: (*InfraObjectServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateInfraObjects",
			Handler:    _InfraObjectService_UpdateInfraObjects_Handler,
		},
		{
			MethodName: "ListInfraObjects",
			Handler:    _InfraObjectService_ListInfraObjects_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "InfraObjectService.proto",
}
