// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package go_client

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FeatureServiceServiceClient is the client API for FeatureServiceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FeatureServiceServiceClient interface {
	CreateFeatureService(ctx context.Context, in *CreateFeatureServiceRequest, opts ...grpc.CallOption) (*FeatureService, error)
	GetFeatureService(ctx context.Context, in *GetFeatureServiceRequest, opts ...grpc.CallOption) (*FeatureService, error)
	UpdateFeatureService(ctx context.Context, in *UpdateFeatureServiceRequest, opts ...grpc.CallOption) (*FeatureService, error)
	DeleteFeatureService(ctx context.Context, in *DeleteFeatureServiceRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	ListFeatureServices(ctx context.Context, in *ListFeatureServicesRequest, opts ...grpc.CallOption) (*ListFeatureServicesResponse, error)
}

type featureServiceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFeatureServiceServiceClient(cc grpc.ClientConnInterface) FeatureServiceServiceClient {
	return &featureServiceServiceClient{cc}
}

func (c *featureServiceServiceClient) CreateFeatureService(ctx context.Context, in *CreateFeatureServiceRequest, opts ...grpc.CallOption) (*FeatureService, error) {
	out := new(FeatureService)
	err := c.cc.Invoke(ctx, "/api.FeatureServiceService/CreateFeatureService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *featureServiceServiceClient) GetFeatureService(ctx context.Context, in *GetFeatureServiceRequest, opts ...grpc.CallOption) (*FeatureService, error) {
	out := new(FeatureService)
	err := c.cc.Invoke(ctx, "/api.FeatureServiceService/GetFeatureService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *featureServiceServiceClient) UpdateFeatureService(ctx context.Context, in *UpdateFeatureServiceRequest, opts ...grpc.CallOption) (*FeatureService, error) {
	out := new(FeatureService)
	err := c.cc.Invoke(ctx, "/api.FeatureServiceService/UpdateFeatureService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *featureServiceServiceClient) DeleteFeatureService(ctx context.Context, in *DeleteFeatureServiceRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/api.FeatureServiceService/DeleteFeatureService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *featureServiceServiceClient) ListFeatureServices(ctx context.Context, in *ListFeatureServicesRequest, opts ...grpc.CallOption) (*ListFeatureServicesResponse, error) {
	out := new(ListFeatureServicesResponse)
	err := c.cc.Invoke(ctx, "/api.FeatureServiceService/ListFeatureServices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FeatureServiceServiceServer is the server API for FeatureServiceService service.
// All implementations should embed UnimplementedFeatureServiceServiceServer
// for forward compatibility
type FeatureServiceServiceServer interface {
	CreateFeatureService(context.Context, *CreateFeatureServiceRequest) (*FeatureService, error)
	GetFeatureService(context.Context, *GetFeatureServiceRequest) (*FeatureService, error)
	UpdateFeatureService(context.Context, *UpdateFeatureServiceRequest) (*FeatureService, error)
	DeleteFeatureService(context.Context, *DeleteFeatureServiceRequest) (*empty.Empty, error)
	ListFeatureServices(context.Context, *ListFeatureServicesRequest) (*ListFeatureServicesResponse, error)
}

// UnimplementedFeatureServiceServiceServer should be embedded to have forward compatible implementations.
type UnimplementedFeatureServiceServiceServer struct {
}

func (UnimplementedFeatureServiceServiceServer) CreateFeatureService(context.Context, *CreateFeatureServiceRequest) (*FeatureService, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFeatureService not implemented")
}
func (UnimplementedFeatureServiceServiceServer) GetFeatureService(context.Context, *GetFeatureServiceRequest) (*FeatureService, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFeatureService not implemented")
}
func (UnimplementedFeatureServiceServiceServer) UpdateFeatureService(context.Context, *UpdateFeatureServiceRequest) (*FeatureService, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFeatureService not implemented")
}
func (UnimplementedFeatureServiceServiceServer) DeleteFeatureService(context.Context, *DeleteFeatureServiceRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFeatureService not implemented")
}
func (UnimplementedFeatureServiceServiceServer) ListFeatureServices(context.Context, *ListFeatureServicesRequest) (*ListFeatureServicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFeatureServices not implemented")
}

// UnsafeFeatureServiceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FeatureServiceServiceServer will
// result in compilation errors.
type UnsafeFeatureServiceServiceServer interface {
	mustEmbedUnimplementedFeatureServiceServiceServer()
}

func RegisterFeatureServiceServiceServer(s grpc.ServiceRegistrar, srv FeatureServiceServiceServer) {
	s.RegisterService(&FeatureServiceService_ServiceDesc, srv)
}

func _FeatureServiceService_CreateFeatureService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFeatureServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeatureServiceServiceServer).CreateFeatureService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.FeatureServiceService/CreateFeatureService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeatureServiceServiceServer).CreateFeatureService(ctx, req.(*CreateFeatureServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeatureServiceService_GetFeatureService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFeatureServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeatureServiceServiceServer).GetFeatureService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.FeatureServiceService/GetFeatureService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeatureServiceServiceServer).GetFeatureService(ctx, req.(*GetFeatureServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeatureServiceService_UpdateFeatureService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFeatureServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeatureServiceServiceServer).UpdateFeatureService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.FeatureServiceService/UpdateFeatureService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeatureServiceServiceServer).UpdateFeatureService(ctx, req.(*UpdateFeatureServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeatureServiceService_DeleteFeatureService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFeatureServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeatureServiceServiceServer).DeleteFeatureService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.FeatureServiceService/DeleteFeatureService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeatureServiceServiceServer).DeleteFeatureService(ctx, req.(*DeleteFeatureServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeatureServiceService_ListFeatureServices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFeatureServicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeatureServiceServiceServer).ListFeatureServices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.FeatureServiceService/ListFeatureServices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeatureServiceServiceServer).ListFeatureServices(ctx, req.(*ListFeatureServicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FeatureServiceService_ServiceDesc is the grpc.ServiceDesc for FeatureServiceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FeatureServiceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.FeatureServiceService",
	HandlerType: (*FeatureServiceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateFeatureService",
			Handler:    _FeatureServiceService_CreateFeatureService_Handler,
		},
		{
			MethodName: "GetFeatureService",
			Handler:    _FeatureServiceService_GetFeatureService_Handler,
		},
		{
			MethodName: "UpdateFeatureService",
			Handler:    _FeatureServiceService_UpdateFeatureService_Handler,
		},
		{
			MethodName: "DeleteFeatureService",
			Handler:    _FeatureServiceService_DeleteFeatureService_Handler,
		},
		{
			MethodName: "ListFeatureServices",
			Handler:    _FeatureServiceService_ListFeatureServices_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "FeatureServiceService.proto",
}
