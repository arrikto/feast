// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package go_client

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FeatureViewServiceClient is the client API for FeatureViewService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FeatureViewServiceClient interface {
	CreateFeatureView(ctx context.Context, in *CreateFeatureViewRequest, opts ...grpc.CallOption) (*FeatureView, error)
	GetFeatureView(ctx context.Context, in *GetFeatureViewRequest, opts ...grpc.CallOption) (*FeatureView, error)
	UpdateFeatureView(ctx context.Context, in *UpdateFeatureViewRequest, opts ...grpc.CallOption) (*FeatureView, error)
	DeleteFeatureView(ctx context.Context, in *DeleteFeatureViewRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	ListFeatureViews(ctx context.Context, in *ListFeatureViewsRequest, opts ...grpc.CallOption) (*ListFeatureViewsResponse, error)
	ReportMI(ctx context.Context, in *ReportMIRequest, opts ...grpc.CallOption) (*MaterializationInterval, error)
}

type featureViewServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFeatureViewServiceClient(cc grpc.ClientConnInterface) FeatureViewServiceClient {
	return &featureViewServiceClient{cc}
}

func (c *featureViewServiceClient) CreateFeatureView(ctx context.Context, in *CreateFeatureViewRequest, opts ...grpc.CallOption) (*FeatureView, error) {
	out := new(FeatureView)
	err := c.cc.Invoke(ctx, "/api.FeatureViewService/CreateFeatureView", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *featureViewServiceClient) GetFeatureView(ctx context.Context, in *GetFeatureViewRequest, opts ...grpc.CallOption) (*FeatureView, error) {
	out := new(FeatureView)
	err := c.cc.Invoke(ctx, "/api.FeatureViewService/GetFeatureView", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *featureViewServiceClient) UpdateFeatureView(ctx context.Context, in *UpdateFeatureViewRequest, opts ...grpc.CallOption) (*FeatureView, error) {
	out := new(FeatureView)
	err := c.cc.Invoke(ctx, "/api.FeatureViewService/UpdateFeatureView", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *featureViewServiceClient) DeleteFeatureView(ctx context.Context, in *DeleteFeatureViewRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/api.FeatureViewService/DeleteFeatureView", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *featureViewServiceClient) ListFeatureViews(ctx context.Context, in *ListFeatureViewsRequest, opts ...grpc.CallOption) (*ListFeatureViewsResponse, error) {
	out := new(ListFeatureViewsResponse)
	err := c.cc.Invoke(ctx, "/api.FeatureViewService/ListFeatureViews", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *featureViewServiceClient) ReportMI(ctx context.Context, in *ReportMIRequest, opts ...grpc.CallOption) (*MaterializationInterval, error) {
	out := new(MaterializationInterval)
	err := c.cc.Invoke(ctx, "/api.FeatureViewService/ReportMI", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FeatureViewServiceServer is the server API for FeatureViewService service.
// All implementations should embed UnimplementedFeatureViewServiceServer
// for forward compatibility
type FeatureViewServiceServer interface {
	CreateFeatureView(context.Context, *CreateFeatureViewRequest) (*FeatureView, error)
	GetFeatureView(context.Context, *GetFeatureViewRequest) (*FeatureView, error)
	UpdateFeatureView(context.Context, *UpdateFeatureViewRequest) (*FeatureView, error)
	DeleteFeatureView(context.Context, *DeleteFeatureViewRequest) (*empty.Empty, error)
	ListFeatureViews(context.Context, *ListFeatureViewsRequest) (*ListFeatureViewsResponse, error)
	ReportMI(context.Context, *ReportMIRequest) (*MaterializationInterval, error)
}

// UnimplementedFeatureViewServiceServer should be embedded to have forward compatible implementations.
type UnimplementedFeatureViewServiceServer struct {
}

func (UnimplementedFeatureViewServiceServer) CreateFeatureView(context.Context, *CreateFeatureViewRequest) (*FeatureView, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFeatureView not implemented")
}
func (UnimplementedFeatureViewServiceServer) GetFeatureView(context.Context, *GetFeatureViewRequest) (*FeatureView, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFeatureView not implemented")
}
func (UnimplementedFeatureViewServiceServer) UpdateFeatureView(context.Context, *UpdateFeatureViewRequest) (*FeatureView, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFeatureView not implemented")
}
func (UnimplementedFeatureViewServiceServer) DeleteFeatureView(context.Context, *DeleteFeatureViewRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFeatureView not implemented")
}
func (UnimplementedFeatureViewServiceServer) ListFeatureViews(context.Context, *ListFeatureViewsRequest) (*ListFeatureViewsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFeatureViews not implemented")
}
func (UnimplementedFeatureViewServiceServer) ReportMI(context.Context, *ReportMIRequest) (*MaterializationInterval, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportMI not implemented")
}

// UnsafeFeatureViewServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FeatureViewServiceServer will
// result in compilation errors.
type UnsafeFeatureViewServiceServer interface {
	mustEmbedUnimplementedFeatureViewServiceServer()
}

func RegisterFeatureViewServiceServer(s grpc.ServiceRegistrar, srv FeatureViewServiceServer) {
	s.RegisterService(&FeatureViewService_ServiceDesc, srv)
}

func _FeatureViewService_CreateFeatureView_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFeatureViewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeatureViewServiceServer).CreateFeatureView(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.FeatureViewService/CreateFeatureView",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeatureViewServiceServer).CreateFeatureView(ctx, req.(*CreateFeatureViewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeatureViewService_GetFeatureView_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFeatureViewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeatureViewServiceServer).GetFeatureView(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.FeatureViewService/GetFeatureView",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeatureViewServiceServer).GetFeatureView(ctx, req.(*GetFeatureViewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeatureViewService_UpdateFeatureView_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFeatureViewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeatureViewServiceServer).UpdateFeatureView(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.FeatureViewService/UpdateFeatureView",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeatureViewServiceServer).UpdateFeatureView(ctx, req.(*UpdateFeatureViewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeatureViewService_DeleteFeatureView_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFeatureViewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeatureViewServiceServer).DeleteFeatureView(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.FeatureViewService/DeleteFeatureView",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeatureViewServiceServer).DeleteFeatureView(ctx, req.(*DeleteFeatureViewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeatureViewService_ListFeatureViews_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFeatureViewsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeatureViewServiceServer).ListFeatureViews(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.FeatureViewService/ListFeatureViews",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeatureViewServiceServer).ListFeatureViews(ctx, req.(*ListFeatureViewsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeatureViewService_ReportMI_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportMIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeatureViewServiceServer).ReportMI(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.FeatureViewService/ReportMI",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeatureViewServiceServer).ReportMI(ctx, req.(*ReportMIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FeatureViewService_ServiceDesc is the grpc.ServiceDesc for FeatureViewService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FeatureViewService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.FeatureViewService",
	HandlerType: (*FeatureViewServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateFeatureView",
			Handler:    _FeatureViewService_CreateFeatureView_Handler,
		},
		{
			MethodName: "GetFeatureView",
			Handler:    _FeatureViewService_GetFeatureView_Handler,
		},
		{
			MethodName: "UpdateFeatureView",
			Handler:    _FeatureViewService_UpdateFeatureView_Handler,
		},
		{
			MethodName: "DeleteFeatureView",
			Handler:    _FeatureViewService_DeleteFeatureView_Handler,
		},
		{
			MethodName: "ListFeatureViews",
			Handler:    _FeatureViewService_ListFeatureViews_Handler,
		},
		{
			MethodName: "ReportMI",
			Handler:    _FeatureViewService_ReportMI_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "FeatureViewService.proto",
}
