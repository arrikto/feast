// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package go_client

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OnDemandFeatureViewServiceClient is the client API for OnDemandFeatureViewService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OnDemandFeatureViewServiceClient interface {
	CreateOnDemandFeatureView(ctx context.Context, in *CreateOnDemandFeatureViewRequest, opts ...grpc.CallOption) (*OnDemandFeatureView, error)
	GetOnDemandFeatureView(ctx context.Context, in *GetOnDemandFeatureViewRequest, opts ...grpc.CallOption) (*OnDemandFeatureView, error)
	UpdateOnDemandFeatureView(ctx context.Context, in *UpdateOnDemandFeatureViewRequest, opts ...grpc.CallOption) (*OnDemandFeatureView, error)
	DeleteOnDemandFeatureView(ctx context.Context, in *DeleteOnDemandFeatureViewRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	ListOnDemandFeatureViews(ctx context.Context, in *ListOnDemandFeatureViewsRequest, opts ...grpc.CallOption) (*ListOnDemandFeatureViewsResponse, error)
}

type onDemandFeatureViewServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOnDemandFeatureViewServiceClient(cc grpc.ClientConnInterface) OnDemandFeatureViewServiceClient {
	return &onDemandFeatureViewServiceClient{cc}
}

func (c *onDemandFeatureViewServiceClient) CreateOnDemandFeatureView(ctx context.Context, in *CreateOnDemandFeatureViewRequest, opts ...grpc.CallOption) (*OnDemandFeatureView, error) {
	out := new(OnDemandFeatureView)
	err := c.cc.Invoke(ctx, "/api.OnDemandFeatureViewService/CreateOnDemandFeatureView", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *onDemandFeatureViewServiceClient) GetOnDemandFeatureView(ctx context.Context, in *GetOnDemandFeatureViewRequest, opts ...grpc.CallOption) (*OnDemandFeatureView, error) {
	out := new(OnDemandFeatureView)
	err := c.cc.Invoke(ctx, "/api.OnDemandFeatureViewService/GetOnDemandFeatureView", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *onDemandFeatureViewServiceClient) UpdateOnDemandFeatureView(ctx context.Context, in *UpdateOnDemandFeatureViewRequest, opts ...grpc.CallOption) (*OnDemandFeatureView, error) {
	out := new(OnDemandFeatureView)
	err := c.cc.Invoke(ctx, "/api.OnDemandFeatureViewService/UpdateOnDemandFeatureView", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *onDemandFeatureViewServiceClient) DeleteOnDemandFeatureView(ctx context.Context, in *DeleteOnDemandFeatureViewRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/api.OnDemandFeatureViewService/DeleteOnDemandFeatureView", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *onDemandFeatureViewServiceClient) ListOnDemandFeatureViews(ctx context.Context, in *ListOnDemandFeatureViewsRequest, opts ...grpc.CallOption) (*ListOnDemandFeatureViewsResponse, error) {
	out := new(ListOnDemandFeatureViewsResponse)
	err := c.cc.Invoke(ctx, "/api.OnDemandFeatureViewService/ListOnDemandFeatureViews", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OnDemandFeatureViewServiceServer is the server API for OnDemandFeatureViewService service.
// All implementations should embed UnimplementedOnDemandFeatureViewServiceServer
// for forward compatibility
type OnDemandFeatureViewServiceServer interface {
	CreateOnDemandFeatureView(context.Context, *CreateOnDemandFeatureViewRequest) (*OnDemandFeatureView, error)
	GetOnDemandFeatureView(context.Context, *GetOnDemandFeatureViewRequest) (*OnDemandFeatureView, error)
	UpdateOnDemandFeatureView(context.Context, *UpdateOnDemandFeatureViewRequest) (*OnDemandFeatureView, error)
	DeleteOnDemandFeatureView(context.Context, *DeleteOnDemandFeatureViewRequest) (*empty.Empty, error)
	ListOnDemandFeatureViews(context.Context, *ListOnDemandFeatureViewsRequest) (*ListOnDemandFeatureViewsResponse, error)
}

// UnimplementedOnDemandFeatureViewServiceServer should be embedded to have forward compatible implementations.
type UnimplementedOnDemandFeatureViewServiceServer struct {
}

func (UnimplementedOnDemandFeatureViewServiceServer) CreateOnDemandFeatureView(context.Context, *CreateOnDemandFeatureViewRequest) (*OnDemandFeatureView, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOnDemandFeatureView not implemented")
}
func (UnimplementedOnDemandFeatureViewServiceServer) GetOnDemandFeatureView(context.Context, *GetOnDemandFeatureViewRequest) (*OnDemandFeatureView, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOnDemandFeatureView not implemented")
}
func (UnimplementedOnDemandFeatureViewServiceServer) UpdateOnDemandFeatureView(context.Context, *UpdateOnDemandFeatureViewRequest) (*OnDemandFeatureView, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOnDemandFeatureView not implemented")
}
func (UnimplementedOnDemandFeatureViewServiceServer) DeleteOnDemandFeatureView(context.Context, *DeleteOnDemandFeatureViewRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOnDemandFeatureView not implemented")
}
func (UnimplementedOnDemandFeatureViewServiceServer) ListOnDemandFeatureViews(context.Context, *ListOnDemandFeatureViewsRequest) (*ListOnDemandFeatureViewsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOnDemandFeatureViews not implemented")
}

// UnsafeOnDemandFeatureViewServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OnDemandFeatureViewServiceServer will
// result in compilation errors.
type UnsafeOnDemandFeatureViewServiceServer interface {
	mustEmbedUnimplementedOnDemandFeatureViewServiceServer()
}

func RegisterOnDemandFeatureViewServiceServer(s grpc.ServiceRegistrar, srv OnDemandFeatureViewServiceServer) {
	s.RegisterService(&OnDemandFeatureViewService_ServiceDesc, srv)
}

func _OnDemandFeatureViewService_CreateOnDemandFeatureView_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOnDemandFeatureViewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnDemandFeatureViewServiceServer).CreateOnDemandFeatureView(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.OnDemandFeatureViewService/CreateOnDemandFeatureView",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnDemandFeatureViewServiceServer).CreateOnDemandFeatureView(ctx, req.(*CreateOnDemandFeatureViewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OnDemandFeatureViewService_GetOnDemandFeatureView_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOnDemandFeatureViewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnDemandFeatureViewServiceServer).GetOnDemandFeatureView(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.OnDemandFeatureViewService/GetOnDemandFeatureView",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnDemandFeatureViewServiceServer).GetOnDemandFeatureView(ctx, req.(*GetOnDemandFeatureViewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OnDemandFeatureViewService_UpdateOnDemandFeatureView_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOnDemandFeatureViewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnDemandFeatureViewServiceServer).UpdateOnDemandFeatureView(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.OnDemandFeatureViewService/UpdateOnDemandFeatureView",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnDemandFeatureViewServiceServer).UpdateOnDemandFeatureView(ctx, req.(*UpdateOnDemandFeatureViewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OnDemandFeatureViewService_DeleteOnDemandFeatureView_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOnDemandFeatureViewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnDemandFeatureViewServiceServer).DeleteOnDemandFeatureView(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.OnDemandFeatureViewService/DeleteOnDemandFeatureView",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnDemandFeatureViewServiceServer).DeleteOnDemandFeatureView(ctx, req.(*DeleteOnDemandFeatureViewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OnDemandFeatureViewService_ListOnDemandFeatureViews_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOnDemandFeatureViewsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnDemandFeatureViewServiceServer).ListOnDemandFeatureViews(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.OnDemandFeatureViewService/ListOnDemandFeatureViews",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnDemandFeatureViewServiceServer).ListOnDemandFeatureViews(ctx, req.(*ListOnDemandFeatureViewsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OnDemandFeatureViewService_ServiceDesc is the grpc.ServiceDesc for OnDemandFeatureViewService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OnDemandFeatureViewService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.OnDemandFeatureViewService",
	HandlerType: (*OnDemandFeatureViewServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateOnDemandFeatureView",
			Handler:    _OnDemandFeatureViewService_CreateOnDemandFeatureView_Handler,
		},
		{
			MethodName: "GetOnDemandFeatureView",
			Handler:    _OnDemandFeatureViewService_GetOnDemandFeatureView_Handler,
		},
		{
			MethodName: "UpdateOnDemandFeatureView",
			Handler:    _OnDemandFeatureViewService_UpdateOnDemandFeatureView_Handler,
		},
		{
			MethodName: "DeleteOnDemandFeatureView",
			Handler:    _OnDemandFeatureViewService_DeleteOnDemandFeatureView_Handler,
		},
		{
			MethodName: "ListOnDemandFeatureViews",
			Handler:    _OnDemandFeatureViewService_ListOnDemandFeatureViews_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "OnDemandFeatureViewService.proto",
}
